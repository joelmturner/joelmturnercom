{
    "version": "https://jsonfeed.org/version/1",
    "title": "Joel M Turner blog",
    "home_page_url": "https://joelmturner.com",
    "feed_url": "https://joelmturner.com/rss/feed.json",
    "icon": "https://joelmturner.com/logo.svg",
    "author": {
        "name": "Joel M Turner",
        "url": "https://twitter.com/joelmturner"
    },
    "items": [
        {
            "id": "https://joelmturner.com/blog/quick-tip-code-extension-data",
            "content_html": "<p><em>(The post <a href=\"https://joelmturner.com/blog/quick-tip-code-extension-data\">Quick Tip: VS Code Extension Folder Location</a> appeared first on <a href=\"https://joelmturner.com\">Joel M Turner Blog</a>.)</em></p>\nVS Code is awesome and there are so many great extensions that make life easier. Some of these extensions store data in folders which are usually placed at the root of the workspace like:\n\n```bash\napp\n└───.vscode\n└───.history # Local History extension folder\n```\n\nUntil recently, I was adding those folders to my `.gitignore` file since they are mainly for personal/local use and didn&#x27;t want to mess with my teammates&#x27; setups. This isn&#x27;t cumbersome but felt a little weird, like mixing too much of my personal setup into our project.\n\nAll of our projects already have `.vscode` in the `.gitignore` file so it makes sense to move any extension folders into the `.vscode` folder and bypass adding individual folders to `.gitignore`.\n\n```bash\napp\n└───.vscode\n│   └───.history\n```\n\nMost extensions that have settings/data folders also have a way to link to the path. The example above is for the [Local History](https://marketplace.visualstudio.com/items?itemName=xyz.local-history) extension which has a setting called `Local History: Path`. Just drop a `${workspaceFolder}/.vscode` in there and you&#x27;re good to go.\n\nNot a huge win but it&#x27;s nice that you don&#x27;t have to add something to your `.gitignore` file every time you try out a new extension.\n",
            "url": "https://joelmturner.com/blog/quick-tip-code-extension-data",
            "title": "Quick Tip: VS Code Extension Folder Location",
            "summary": "By relocating the folders that are created/updated by VS Code Extensions we can bypass the need to update a gitignore file.",
            "date_modified": "2022-07-08T05:56:36.085Z",
            "author": {
                "name": "Joel M Turner",
                "url": "https://twitter.com/joelmturner"
            }
        },
        {
            "id": "https://joelmturner.com/blog/working-feature-senior-frontend-developer",
            "content_html": "<p><em>(The post <a href=\"https://joelmturner.com/blog/working-feature-senior-frontend-developer\">Working on a New Feature as a Senior Frontend Developer</a> appeared first on <a href=\"https://joelmturner.com\">Joel M Turner Blog</a>.)</em></p>\nWhen I receive a ticket for a new feature, I generally follow a few guidelines to make sure I have what I need to get started. I&#x27;ll share some of my questions and thoughts here for reference (as much for myself as anyone).\n\n## Before the Code\n\nI usually start out by assessing the scope of the feature. The following questions help guide me before I fire up VS Code.\n\n1. Do we have a design for this feature? _depending on size, this may need to push back into design&#x27;s hands_\n2. Is this an existing pattern or a new one? _I prefer existing in the design system_\n3. Is this reusable or scoped to a certain part of the app? _can help with architecture_\n4. Will this need API updates to get to feature complete?\n   1. If yes, does API work need to happen before UI?\n   2. If yes, are they simple updates? _I can handle simple updates, otherwise I&#x27;ll have to pass off the API work to someone with more Java experience on the team_\n5. What does finished look like? _this can help with tests and QA_\n6. Is this a part of the app that I&#x27;m familiar with? _might take longer if I&#x27;m not familiar_\n   1. If no, who can I ask for help if I get stuck?\n7. Is this an opportunity to refactor some older code? _often, these are the only chances to clean up tech debt_\n\nWhew! That&#x27;s a lot! Let&#x27;s get into the code already.\n\n&lt;Flex alignItems=&quot;center&quot; flexDirection=&quot;column&quot; maxWidth=&quot;350px&quot; m=&quot;0 auto&quot;&gt;\n  &lt;div\n    style={{\n      width: &#x27;100%&#x27;,\n      height: 0,\n      paddingBottom: &#x27;100%&#x27;,\n      position: &#x27;relative&#x27;,\n    }}\n  &gt;\n    &lt;iframe\n      src=&quot;https://giphy.com/embed/3krrjoL0vHRaWqwU3k&quot;\n      width=&quot;100%&quot;\n      height=&quot;100%&quot;\n      style={{ position: &#x27;absolute&#x27; }}\n      frameBorder=&quot;0&quot;\n      class=&quot;giphy-embed&quot;\n      allowFullScreen\n    &gt;&lt;/iframe&gt;\n  &lt;/div&gt;\n  &lt;p&gt;\n    &lt;a href=&quot;https://giphy.com/gifs/spotify-play-streaming-3krrjoL0vHRaWqwU3k&quot;&gt;via GIPHY&lt;/a&gt;\n  &lt;/p&gt;\n&lt;/Flex&gt;\n\n## Diving Into Code\n\nOnce I have some satisfactory answers to the above questions, I dive into the code to help answer some other questions, as well as generate some new ones. There are usually still a few unknowns that arise before the downhill of writing the feature.\n\nOnce I&#x27;m in the code, I try to determine the architecture of the feature and assess the state requirements.\n\n1. Can the state be isolated to this feature?\n   1. If no, how much needs to be refactored to implement this feature?\n   2. If no, how high does the state need to go?\n2. Is this feature directly coupled with another feature?\n   1. If yes, can I separate concerns so they are easier to reason about and maintain?\n3. Can I remove code to help reduce complexity? _ongoing tech debt work_\n\nFrom here, I can start piecing together the UI. I love seeing visual progress right away so I usually start by fleshing out the layout and adding placeholder divs for the elements. This helps me get a bit of a wireframe together before diving into the details, which can help me determine where the state should live and how to break the components down.\n\nAs I fill in the details, I can create the types, helper functions, hooks, and components that are needed. Hopefully, most of this comes from the design library but sometimes we have to piece together a solution outside of it.\n\nI almost always run some parts of my solution or my architecture by my manager, [Ryan](https://www.linkedin.com/in/ryan-legler-b0807853/), who is an incredible architect and a master of thinking through edge cases. That helps determine a stable foundation to the feature and future maintenance/updates to the feature.\n\nAlmost done!\n\n&lt;Flex alignItems=&quot;center&quot; flexDirection=&quot;column&quot; m=&quot;0 auto&quot;&gt;\n  &lt;img\n    src=&quot;https://res.cloudinary.com/joelmturner/image/upload/w_512/v1657085654/gatsby-toasting-meme_kzslea.jpg&quot;\n    alt=&quot;Leo DiCaprio as Great Gatsby toasting the viewer&quot;\n    srcset=&quot;https://res.cloudinary.com/joelmturner/image/upload/w_1024/v1657085654/gatsby-toasting-meme_kzslea.jpg 1024w, https://res.cloudinary.com/joelmturner/image/upload/w_512/v1657085654/gatsby-toasting-meme_kzslea.jpg 512w, https://res.cloudinary.com/joelmturner/image/upload/w_256/v1657085654/gatsby-toasting-meme_kzslea.jpg 256w&quot;\n    sizes=&quot;(min-width: 30em) 30em, 100vw&quot;\n  /&gt;\n&lt;/Flex&gt;\n\n## Wrapping Up\n\nI like to go through any helper functions I&#x27;ve added to make sure they are covered with tests. This can be true for the components as well, depending on their complexity. This is also the time when I create a Pull Request and have the rest of the team weigh in on patterns, issues, and things I&#x27;ve overlooked.\n\nOnce the PR is approved it is on its way to QA where it has the edges poked at. If there are any edges found, I&#x27;ll solve for those edges, and if applicable, add tests for those edges.\n\n## How do You Work Through a New Ticket?\n\nI would love to hear how other&#x27;s work through feature tickets, no matter what experience you have in development. Hit me up on [Twitter](https://twitter.com/joelmturner) if you&#x27;d like. I think we all come at it from our unique angles and can help each other as we learn and grow.\n",
            "url": "https://joelmturner.com/blog/working-feature-senior-frontend-developer",
            "title": "Working on a New Feature as a Senior Frontend Developer",
            "summary": "Some of the questions and thought processes I have as I work through a new feature ticket.",
            "date_modified": "2022-07-06T04:28:59.027Z",
            "author": {
                "name": "Joel M Turner",
                "url": "https://twitter.com/joelmturner"
            }
        },
        {
            "id": "https://joelmturner.com/blog/static-nextjs-netlify-500-errors-404-errors",
            "content_html": "<p><em>(The post <a href=\"https://joelmturner.com/blog/static-nextjs-netlify-500-errors-404-errors\">Static Nextjs Netlify 500 Errors Instead of 404 Errors</a> appeared first on <a href=\"https://joelmturner.com\">Joel M Turner Blog</a>.)</em></p>\nI recently switched my site from Gatsby to Next while still deploying to Netlify. For the most part, it went very well. I&#x27;ll write some more soon about the transition and some of the challenges that arose.\n\n## The Problem\n\nToday I&#x27;m going to cover an issue that I ran into after deploying my site to Netlify. The problem is that if someone were to go to a blog post that didn&#x27;t exist, like [https://joelmturner.com/blog/abc](https://joelmturner.com/blog/abc), they would receive a 500 error message. Since it&#x27;s a 500 from the server, the client doesn&#x27;t spin up and I can&#x27;t see which page was trying to be accessed.\n\nThis had me searching all over for the root cause since it all worked locally and I would expect that it would just throw a 404 error like other missing pages. Finally, after searching for quite some time, I came across a [GitHub issue](https://github.com/netlify/netlify-plugin-nextjs/issues/1179) that resembled my problem. Sure enough, [hu0p](https://github.com/hu0p) had a [workaround](https://github.com/netlify/netlify-plugin-nextjs/issues/1179#issuecomment-1110301726) that worked for me as well.\n\nThe factors that lead to this issue are:\n\n- Hosted on Netlify\n- Running the Essential Next.js plugin (the culprit)\n- Static site build of Nextjs\n- Have some dynamic routes like `pages/blog/[id].tsx`\n- Hit a route that doesn&#x27;t exist on that dynamic route\n\n## The Solution\n\nBy wrapping the data fetching with a try/catch, we are able to return `notFound: true` which will trigger the 404 page. I wasn&#x27;t aware that `notFound` was a return value until I saw this workaround.\n\nInstead of:\n\n```ts\nexport async function getStaticProps({ params }) {\n  const postData = await getPostData(params.id);\n\n  return {\n    props: {\n      ...postData,\n    },\n  };\n}\n```\n\nWe use try/catch:\n\n```ts line=2-10\nexport async function getStaticProps({ params }) {\n  let postData;\n  try {\n    postData = await getPostData(params.id);\n  } catch (e) {\n    console.error(e);\n    return {\n      notFound: true,\n    };\n  }\n\n  return {\n    props: {\n      ...postData,\n    },\n  };\n}\n```\n",
            "url": "https://joelmturner.com/blog/static-nextjs-netlify-500-errors-404-errors",
            "title": "Static Nextjs Netlify 500 Errors Instead of 404 Errors",
            "summary": "Digging into a bug with Netlify's Next plugin that causes 500 errors instead of 404 errors. There is a quick workaround that works for this specific case.",
            "date_modified": "2022-07-03T04:19:41.807Z",
            "author": {
                "name": "Joel M Turner",
                "url": "https://twitter.com/joelmturner"
            }
        },
        {
            "id": "https://joelmturner.com/blog/react-one-time-password-input-component",
            "content_html": "<p><em>(The post <a href=\"https://joelmturner.com/blog/react-one-time-password-input-component\">React One Time Password Input Component</a> appeared first on <a href=\"https://joelmturner.com\">Joel M Turner Blog</a>.)</em></p>\nimport { CodeSandbox } from &#x27;mdx-embed&#x27;;\n\nI recently had an opportunity to create a one-time-password like component in a React app. The goal was to have a readonly separated, 6 digit/character code that can be displayed on one device and a separated input to enter that code in a web app.\n\nThe solution I arrived at is a 6-input component that advances the focus as the user types. This can also handle the &quot;Backspace&quot; key via the [useKeyPressEvent](https://github.com/streamich/react-use/blob/master/docs/useKeyPressEvent.md) hook from [react-use](https://github.com/streamich/react-use).\n\nThis is the solution that worked for our case and I would love to hear others have solved this challenge as well.\n\n## What We&#x27;re Building\n\n&lt;CodeSandbox codeSandboxId=&quot;react-one-time-password-partition-input-29tzrq&quot; /&gt;\n\n## Parent Component\n\nThe component that is orchestrating the `SeparatedInput` component will need to have a state for the value and a handler to update that state with the value that `SeparatedInput` will pass back up. We can set it up like this:\n\n```tsx filename=OTPContainer.tsx\nexport function OTPContainer({}) {\n  const [value, setValue] = useState(&#x27;&#x27;);\n\n  const handleChange = (newValue: string) =&gt; {\n    // do validation work here\n    setValue(newValue);\n  };\n\n  return &lt;SeparatedInput value={value} onChange={handleChange} /&gt;;\n}\n```\n\n## Rendering The Inputs\n\nWe&#x27;re going to start with a new component and name it something like `SeparatedInput.tsx`. This component will house our inputs and the handlers for them. We&#x27;ll be using [styled-components](https://styled-components.com/) to make the styling a bit easier.\n\n```tsx filename=SeparatedInput.tsx\nexport const InputContainer = styled.div`\n  display: flex;\n  justify-content: between;\n  gap: 2em;\n  max-width: 44em; // magic number, can be whatever fits the project&#x27;s needs\n`;\n\nexport function SeparatedInput({}) {\n  return &lt;InputContainer&gt;{/* we&#x27;ll place the inputs here */}&lt;/InputContainer&gt;;\n}\n```\n\nWe&#x27;ll need to pass our value to this component so let&#x27;s add that as a prop.\n\n```tsx\n...\nexport function SeparatedInput({ value }) {\n...\n```\n\nNow we need to separate this value into an array that we can map into our inputs.\n\n```tsx\n...\n// can make this a passed prop if reused and more/fewer digits/characters are needed\nconst MAX_DIGITS = 6;\n\nexport function SeparatedInput({ value }: { value: string }) {\n    const separatedValue = useMemo(() =&gt; {\n        // fill the unused inputs with empty strings\n        const filler = Array(MAX_DIGITS - value.length).fill(&quot;&quot;);\n        const resolvedValue = [...value, ...filler];\n\n        // make sure it&#x27;s only 6 characters long\n        resolvedValue.length = MAX_DIGITS;\n        return resolvedValue;\n    }, [value]);\n...\n```\n\nWe can spread our value into an array to create an array of characters. This is great if our `value` is 6 characters long but doesn&#x27;t quite work if it&#x27;s less than that. To fix this, we can fill out the rest with empty strings using `Array(n).fill(&quot;&quot;)`. We can then spread this into our array as well.\n\nThe line `resolvedValue.length = MAX_DIGITS;` trims any elements over our length of `MAX_DIGITS` (6).\n\nFrom here, we can map over our array and render our inputs using those strings.\n\n```tsx\n...\nexport const StyledInput = styled.input`\n  padding: 0.5em 0.25em;\n  font-size: 2.75em;\n  margin-bottom: 0.25em;\n  border: none;\n  border-bottom: 6px solid hsl(0, 0%, 20%);\n  background-color: hsl(0, 0%, 7%);\n  color: hsl(0, 0%, 90%);\n  width: calc(100% / 6);\n  text-align: center;\n  /* we use a serif font to help differentiate characters/digits */\n  font-family: serif;\n`;\n...\nreturn (\n    &lt;InputContainer&gt;\n      {separatedValue.map((character, index) =&gt; {\n        return (\n          &lt;StyledInput\n            key={index}\n            id={`${index}`}\n            value={character}\n          /&gt;\n        );\n      })}\n    &lt;/InputContainer&gt;\n  );\n```\n\n## Handling Input Value Changes\n\nWe can use one function to pass to the inputs since each input will send an event on change. With this, we&#x27;ll be passing our `onChange` back up via a prop.\n\n```tsx\n...\nexport function SeparatedInput({ value, onChange }: {\n  value: string;\n  onChange?: (value: string) =&gt; void;\n}) {\n...\n    const handleChange = (event: ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {\n        onChange?.(value + event.target.value);\n    };\n\n    return (\n        &lt;InputContainer&gt;\n        {separatedValue.map((character, index) =&gt; {\n            return (\n            &lt;StyledInput\n                key={index}\n                id={`${index}`}\n                value={character}\n                onChange={handleChange}\n            /&gt;\n            );\n        })}\n        &lt;/InputContainer&gt;\n    );\n}\n```\n\nGreat! This handler will take each unique event and add that to the value. We still have an issue with typing into the inputs since they don&#x27;t advance to the next input. This will cause the value to keep growing out of sync with the focussed input.\n\nFor the focus we can leverage `useRef`. We&#x27;ll get the ref of the `InputContainer` so we can control the focus of its children. We&#x27;ll also need some state to handle the focus index. We can then update the focus via `useEffect` on the update of focus index.\n\nTo set the focus index we can take the previous state and check to see if it&#x27;s less than the last input index and, if so, increment by one.\n\n```tsx\n...\nexport function SeparatedInput({ value, onChange }: {\n  value: string;\n  onChange?: (value: string) =&gt; void;\n}) {\n    const ref = useRef&lt;HTMLDivElement&gt;(null);\n    // initial value of zero will focus the first input on load\n    const [focusIndex, setFocusIndex] = useState(0);\n\n    useEffect(() =&gt; {\n        // focus the current input by index\n        if (ref.current?.children[focusIndex]) {\n            (ref.current.children[focusIndex] as HTMLInputElement).focus();\n        }\n    }, [focusIndex, readOnly]);\n\n    const handleChange = (event: ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {\n        // move the cursor forward after input\n        setFocusIndex((prev) =&gt;\n            prev &lt; MAX_DIGITS - 1 ? prev + 1 : MAX_DIGITS - 1\n        );\n\n        onChange?.(value + event.target.value);\n    };\n...\n    return (\n        &lt;InputContainer&gt;\n            {separatedValue.map((character, index) =&gt; {\n                return (\n                    &lt;StyledInput\n                        key={index}\n                        id={`${index}`}\n                        value={character}\n                        onChange={handleChange}\n                    /&gt;\n                );\n            })}\n        &lt;/InputContainer&gt;\n    );\n}\n```\n\nCool, this seems to work pretty well for adding characters to the inputs. The next thing we&#x27;ll need to do is handle removing characters using &quot;Backspace.&quot; To achieve this, we&#x27;ll use the [useKeyPressEvent](https://github.com/streamich/react-use/blob/master/docs/useKeyPressEvent.md) hook. This hook takes the keyPress key as the first argument and a callback function to do something when that key is pressed.\n\nLet&#x27;s set up the callback function first. For our specific case we want the &quot;Backspace&quot; key remove the last character in our value. We can use slice on the value string to handle this. After removing the item, we&#x27;ll set the focus to the previous input.\n\nOnce our function is in place we can pass it to `useKeyPressEvent`.\n\n```tsx\nimport { useKeyPressEvent } from &quot;react-use&quot;;\n...\n    const handleBackspace = useCallback(() =&gt; {\n        // remove the last character\n        const newValue = value.slice(0, -1);\n        // move the cursor back one\n        setFocusIndex((prev) =&gt; (prev &gt; 0 ? prev - 1 : 0));\n        onChange?.(newValue);\n    }, [onChange, value]);\n\n    // fires handleBackspace event when Backspace is pressed\n    useKeyPressEvent(&quot;Backspace&quot;, handleBackspace);\n...\n```\n\nNow we can move back and forth by typing characters and &quot;Backspace.&quot;\n\nWe can still click into any input and the focus will shift to that one. However, if we type it will add the character to the next input in our sequence. There are few ways to improve this experience and I&#x27;ll share the one that is currently meeting our needs, though we may update it in the future.\n\nThe input sequence we&#x27;ll use is just forward and back, without the user clicking or tabbing/shift+tabbing into other inputs. Since it&#x27;s only six characters it shouldn&#x27;t be too bad to hit &quot;Backspace&quot; a few times rather than update a previous input via mouse click. If it were longer I would definitely opt for a solution where you can correct any input in the chain.\n\nWe can use the `disabled` attribute on the inputs to prevent the input from receiving focus. We&#x27;ll create a check to make sure that the inputs before and after our current focus index are disabled. We&#x27;ll also prevent it from disabling the last input if all values are filled.\n\n```tsx\nreturn (\n    &lt;InputContainer ref={ref}&gt;\n      {separatedValue.map((character, index) =&gt; {\n        const disabled =\n          (index &lt; value.length &amp;&amp; index + 1 &lt; MAX_DIGITS) ||\n          index &gt; focusIndex;\n        return (\n          &lt;StyledInput\n            key={index}\n            id={`${index}`}\n            value={character}\n            onChange={handleChange}\n            disabled={disabled}\n          /&gt;\n        );\n      })}\n    &lt;/InputContainer&gt;\n  );\n}\n```\n\n## Display the Code\n\nThis component will also be used to display the generated code to the user in the other device. In order to use this as a display component we&#x27;ll want to make sure the user can&#x27;t update the inputs. We&#x27;ll use a combination of `disabled` and `readonly` attributes.\n\nThe parent can pass the `value` and the `readOnly` props to the `SeparatedInput` component.\n\n```tsx filename=OTPDisplayContainer.tsx\nexport function OTPDisplayContainer({}) {\n  const value = useGetValueFromService();\n\n  return &lt;SeparatedInput value={value} readOnly /&gt;;\n}\n```\n\nThe `SeparatedInput` will then use this to check for in the handlers and inputs to make sure it will only show the value, not change it. The final component code will then be as follows.\n\n```tsx\nimport React, { ChangeEvent, useCallback, useEffect, useMemo, useRef, useState } from &#x27;react&#x27;;\nimport { useKeyPressEvent } from &#x27;react-use&#x27;;\nimport { InputContainer, StyledInput } from &#x27;./styledComponents&#x27;;\n\n// can make this a passed prop if more/fewer digits/characters are needed\nconst MAX_DIGITS = 6;\n\nexport function SeparatedInput({\n  value,\n  onChange,\n  readOnly,\n}: {\n  value: string;\n  onChange?: (value: string) =&gt; void;\n  readOnly: boolean;\n}) {\n  const ref = useRef&lt;HTMLDivElement&gt;(null);\n  const [focusIndex, setFocusIndex] = useState(0);\n\n  const handleBackspace = useCallback(() =&gt; {\n    if (readOnly) {\n      return;\n    }\n    // remove the last character\n    const newValue = value.slice(0, -1);\n    // move the cursor back one\n    setFocusIndex((prev) =&gt; (prev &gt; 0 ? prev - 1 : 0));\n    onChange?.(newValue);\n  }, [onChange, readOnly, value]);\n\n  // fires handleBackspace event when Backspace is pressed\n  useKeyPressEvent(&#x27;Backspace&#x27;, handleBackspace);\n\n  useEffect(() =&gt; {\n    // focus the current input by index\n    if (ref.current?.children[focusIndex] &amp;&amp; !readOnly) {\n      (ref.current.children[focusIndex] as HTMLInputElement).focus();\n    }\n  }, [focusIndex, readOnly]);\n\n  const separatedValue = useMemo(() =&gt; {\n    // fill the unused inputs with empty strings\n    const filler = Array(MAX_DIGITS - value.length).fill(&#x27;&#x27;);\n    const resolvedValue = [...value, ...filler];\n\n    // make sure it&#x27;s only 6 characters long\n    resolvedValue.length = MAX_DIGITS;\n    return resolvedValue;\n  }, [value]);\n\n  const handleChange = useCallback(\n    (event: ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {\n      if (readOnly) {\n        return;\n      }\n      // move the cursor forward after input\n      setFocusIndex((prev) =&gt; (prev &lt; MAX_DIGITS - 1 ? prev + 1 : MAX_DIGITS - 1));\n      onChange?.(value + event.target.value);\n    },\n    [onChange, readOnly, value]\n  );\n\n  return (\n    &lt;InputContainer ref={ref}&gt;\n      {separatedValue.map((character, index) =&gt; {\n        const disabled =\n          readOnly || (index &lt; value.length &amp;&amp; index + 1 &lt; MAX_DIGITS) || index &gt; focusIndex;\n        return (\n          &lt;StyledInput\n            key={index}\n            id={`${index}`}\n            value={character}\n            onChange={handleChange}\n            readOnly={readOnly}\n            disabled={disabled}\n          /&gt;\n        );\n      })}\n    &lt;/InputContainer&gt;\n  );\n}\n```\n",
            "url": "https://joelmturner.com/blog/react-one-time-password-input-component",
            "title": "React One Time Password Input Component",
            "summary": "One time password input component for React. Uses a separated input for the OTP read and write.",
            "date_modified": "2022-03-26T05:07:58.270Z",
            "author": {
                "name": "Joel M Turner",
                "url": "https://twitter.com/joelmturner"
            }
        },
        {
            "id": "https://joelmturner.com/blog/gatsby-client-side-external-redirect",
            "content_html": "<p><em>(The post <a href=\"https://joelmturner.com/blog/gatsby-client-side-external-redirect\">Gatsby Client-Side External Redirect</a> appeared first on <a href=\"https://joelmturner.com\">Joel M Turner Blog</a>.)</em></p>\nWe had a case where we needed to set up a redirect on the client side of Gatsby but we didn&#x27;t want to spin up a lambda to handle this one case. A redirect like this wouldn&#x27;t be a problem with some of the hosts out there, but we&#x27;re just using s3 and Cloudfront for this site.\n\nTo set up a quick redirect on the client we can send a redirect link through page context and handle the window location in a `useEffect`.\n\n```javascript filename=gatsby-node.js\n {\n    path: &quot;/path&quot;,\n    component: resolve(__dirname, &quot;../src/templates/EmptyPage.tsx&quot;),\n    context: {\n        redirectTo:\n            &quot;https://someawesomewebsite.com/newLink&quot;,\n    },\n},\n```\n\n```tsx filename=templates/emptyPage.tsx\nimport React, { useEffect } from &#x27;react&#x27;;\n\nfunction isClient() {\n  return typeof window === &#x27;object&#x27;;\n}\n\nexport default function EmptyPage({ pageContext }) {\n  useEffect(() =&gt; {\n    if (isClient() &amp;&amp; pageContext?.redirectTo) {\n      window.location.href = pageContext.redirectTo;\n    }\n  }, []);\n\n  return &lt;div /&gt;;\n}\n```\n",
            "url": "https://joelmturner.com/blog/gatsby-client-side-external-redirect",
            "title": "Gatsby Client-Side External Redirect",
            "summary": "A client-side redirect for Gatsby when you don't have access to the CloudFront settings.",
            "date_modified": "2021-11-02T05:16:08.131Z",
            "author": {
                "name": "Joel M Turner",
                "url": "https://twitter.com/joelmturner"
            }
        },
        {
            "id": "https://joelmturner.com/blog/instagram-cloudinary",
            "content_html": "<p><em>(The post <a href=\"https://joelmturner.com/blog/instagram-cloudinary\">Instagram to Cloudinary</a> appeared first on <a href=\"https://joelmturner.com\">Joel M Turner Blog</a>.)</em></p>\nWe&#x27;re going to walk through setting up a Node.js project that will fetch Instagram posts, filter by a set of hashtags, then upload those images to Cloudinary, and then trigger a Netlify build. This script will run on a schedule through Github Actions.\n\n## tl;tr\n\nHere&#x27;s the [instagram-cloudinary](https://github.com/joelmturner/instagram-cloudinary) repo if you&#x27;d like to skip to the final code.\n\n## The Problem\n\nFirst, a little history...\n\nI&#x27;ve been using the [gatsby-source-instagram](https://www.gatsbyjs.com/plugins/gatsby-source-instagram/) plugin for a while on my site to highlight some of my [illustrations](&#x27;/illustrations&#x27;). I even [added some functionality to the plugin](https://github.com/oorestisime/gatsby-source-instagram/pull/164) so consumers could query their posts by hashtag.\n\nThe [plugin author](https://github.com/oorestisime) has done a great job tracking down issues and documenting the convoluted steps to get Facebook/Instagram API credentials. The plugin worked great for a while, but due to many changes in the Facebook/Instagram API, it became less reliable and harder to debug.\n\nIt got to a point where I couldn&#x27;t update my site because of the errors from the Instagram API. I believe that part of the problem is the frequency of querying the API, where it seemed to only work every few minutes, throwing an error in between of &quot;Please try again later.&quot; When working on the site locally, it would cause a cascade of errors in Gatsby&#x27;s graph. Because of this and the ever-changing permissions in the Facebook API, the plugin has been much harder to maintain.\n\nTo query the Instagram API less frequently and have more control, I decided to set up a Node.js project to fetch posts from the Instagram API, filter and find hashtags, and then upload those to Cloudinary. When the posts send successfully, the script fires a Netlify build via a webhook.\n\n## The Goal\n\nTo make this work for my case, I jotted down what I needed this script to do.\n\n1. fetch the latest posts from Instagram\n   - make sure we get the first few comments (I used to put the post&#x27;s hashtags in the first comment)\n2. upload the posts that match my hashtag list to Cloudinary\n3. trigger a build of my site (my site is running [gatsby-source-cloudinary](https://www.gatsbyjs.com/plugins/gatsby-source-cloudinary/))\n\n## Setting up a new project\n\nThe first thing to do is set up a new Node.js project. There are quite a few starters out there, but, for this, I just started from scratch.\n\nCreate the project folder and navigate to it.\n\n```bash\nmkdir instagram-cloudinary\ncd instagram-cloudinary\n```\n\nInitialize the package.json. I use `yarn`, but feel free to use `npm`.\n\n```bash\nyarn init\n```\n\nThis is what my package.json file looks like after initialization:\n\n```json filename=package.json\n{\n  &quot;name&quot;: &quot;instagram-cloudinary&quot;,\n  &quot;version&quot;: &quot;1.0.0&quot;,\n  &quot;main&quot;: &quot;src/index.js&quot;,\n  &quot;author&quot;: &quot;@joelmturner&quot;,\n  &quot;license&quot;: &quot;MIT&quot;,\n  &quot;private&quot;: true\n}\n```\n\nI like to use TypeScript so that&#x27;s the first dependency I&#x27;ll add here. The `-D` flag sets them as `devDependencies`. `ts-node` is going to help run the script.\n\n```bash\nyarn add -D typescript ts-node @types/node\n```\n\nNext, it&#x27;s time to set up the `tsconfig.json` file. I usually run the `init` and update the items as necessary.\n\n```bash\nyarn tsc --init\n```\n\nThis is how mine looks after cleanup.\n\n```json filename=tsconfig.json\n{\n  &quot;compilerOptions&quot;: {\n    &quot;target&quot;: &quot;esnext&quot;,\n    &quot;module&quot;: &quot;commonjs&quot;,\n    &quot;rootDir&quot;: &quot;src&quot;,\n    &quot;isolatedModules&quot;: true,\n    &quot;strict&quot;: true,\n    &quot;noImplicitAny&quot;: false,\n    &quot;resolveJsonModule&quot;: true,\n    &quot;esModuleInterop&quot;: true,\n    &quot;lib&quot;: [&quot;es2015&quot;, &quot;dom&quot;]\n  }\n}\n```\n\nSince we&#x27;ll be using API keys for Instagram and Cloudinary, we can add `dotenv` to help us with the environment variables.\n\n```bash\nyarn add -D dotenv\n```\n\nNext is adding the script file in the `src` folder.\n\n```bash\nmkdir src\ntouch src/index.ts\n```\n\nIn this file we can add some pseudo code to help us step through. Our `src/index.ts` can look like this:\n\n```typescript filename=src/index.ts\nasync function instagramToCloudinary() {\n  // fetch the posts from Instagram\n  // convert the posts by hashtags\n  // upload to Cloudinary\n  // trigger a build if posts are pulled successfully\n}\n\n// fire the script\ninstagramToCloudinary();\n```\n\n## Instagram Query\n\nLet&#x27;s get those posts!\n\nWe&#x27;ll start with adding axios as a dependency. Axios will help us with the requests.\n\n```bash\nyarn add -D axios\n```\n\nNext, let&#x27;s set up some environment variables for Instagram. For this, you&#x27;ll need an access token and Instagram id from Facebook so that you can query Instagram. Honestly, I don&#x27;t remember how I got these working correctly but, the directions on [gatsby-source-instagram](https://www.gatsbyjs.com/plugins/gatsby-source-instagram/#instagram-graph-api-token) were helpful.\n\nCreate a `.env` file at the root of your project and add your values like:\n\n```bash filename=.env\nINSTAGRAM_ACCESS_TOKEN=XXXXXX\nINSTAGRAM_ID=XXXXXX\n```\n\nNow that we have these ready, we can start putting the script together. I&#x27;ll put the Instagram fetching in its own function, so it&#x27;s easier to reason about later.\n\n```typescript filename=src/index.ts line=1-10,13\nrequire(&#x27;dotenv&#x27;).config();\nconst MAX_POSTS = 500;\n\nasync function fetchInstagramPosts() {\n  console.log(&#x27;🚀 fetching Instagram posts&#x27;);\n  const response = await axios.get(\n    `https://graph.facebook.com/v12.0/${process.env.INSTAGRAM_ID}/media?fields=media_url,caption,media_type,timestamp,children{media_url},comments.limit(3){text}&amp;limit=${MAX_POSTS}&amp;access_token=${process.env.INSTAGRAM_ACCESS_TOKEN}`\n  );\n  return response?.data?.data;\n}\n\nasync function instagramToCloudinary() {\n  // fetch the posts from Instagram\n  const posts = await fetchInstagramPosts();\n\n  // convert the posts by hashtags\n  // upload to Cloudinary\n  // trigger a build if posts are pulled successfully\n}\n\n// fire the script\ninstagramToCloudinary();\n```\n\nFirst, we add the `require(&quot;dotenv&quot;).config();` so we have access to the environment variables that we set up above.\n\nFor the request, we&#x27;re using axios and building the URL with our parameters. The parameters are specialized to what we need for grabbing all the user&#x27;s posts and the first three comments on those posts.\n\nWe&#x27;re using the environment variables declared above to place into these parameters for the id and access token. The `MAX_POSTS` is a setting that we can increase whenever we need to do more or decrease if we&#x27;re only trying to maintain the last few posts posted to Instagram.\n\nWe then use an `await` to make sure the posts resolve before moving on to the next step. We can also add a try-catch in case there is a failure.\n\n```typescript filename=src/index.ts line=2,8-10\nasync function fetchInstagramPosts() {\n  try {\n    console.log(&#x27;🚀 fetching Instagram posts&#x27;);\n    const response = await axios.get(\n      `https://graph.facebook.com/v12.0/${process.env.INSTAGRAM_ID}/media?fields=media_url,caption,media_type,timestamp,children{media_url},comments.limit(3){text}&amp;limit=${MAX_POSTS}&amp;access_token=${process.env.INSTAGRAM_ACCESS_TOKEN}`\n    );\n    return response?.data?.data;\n  } catch (error) {\n    console.log(&#x27;😿 Instagram fetch error&#x27;, error);\n  }\n}\n```\n\n## Prepare the Posts by Hashtag\n\nLet&#x27;s do this section in its own function as well. We can add the invocation of it to `instagramToCloudinary()`. We&#x27;ll add a type of `UploadPost` that we can define in `src/types.ts` and import into our script. The `UploadPost` array will store our data in a way that we can pass to Cloudinary more easily.\n\n```typescript filename=src/index.ts line=7-10,13\nimport { UploadPost } from &#x27;./types&#x27;;\n\nasync function instagramToCloudinary() {\n  // fetch the posts from Instagram\n  const posts = await fetchInstagramPosts();\n\n  if (posts?.length) {\n    // convert the posts by hashtags\n    const cloudinaryCollection: UploadPost[] = convertInstagramPostToCloudinaryEntity(posts);\n\n    // upload to Cloudinary\n    // trigger a build if posts are pulled successfully\n  }\n}\n```\n\n```typescript filename=src/types.ts\nexport type UploadPost = {\n  url: string;\n  public_id: string;\n  folder: string;\n  overwrite: true;\n  tags: string[];\n  createdDate: number;\n};\n```\n\nNow, let&#x27;s create the `convertInstagramPostToCloudinaryEntity()` function. This one is fairly deep, so I&#x27;ll try to walk through it in pieces, then put it all together. We can stub out the function and add a type of `Post` which is, roughly, the shape we get back from the Instagram API.\n\n```typescript filename=src/index.ts\nimport { Post, UploadPost } from &#x27;./types&#x27;;\nrequire(&#x27;dotenv&#x27;).config();\nconst MAX_POSTS = 500;\n\nasync function fetchInstagramPosts() {}\n\nfunction convertInstagramPostToCloudinaryEntity(posts: Post[]): UploadPost[] {\n  console.log(&#x27;🚀 converting posts to Cloudinary&#x27;);\n\n  // check for hashtags in the posts and add to the collection\n}\n```\n\n```typescript filename=src/types.ts\nexport type Post = {\n  media_url: string;\n  caption?: string;\n  media_type: &#x27;IMAGE&#x27; | &#x27;VIDEO&#x27; | &#x27;AUDIO&#x27;;\n  timestamp: string;\n  comments_count: number;\n  id: string;\n  comments?: {\n    data: Comment[];\n  };\n};\n```\n\nNow that we have a function ready to start with, we need to figure out how to filter the posts based on a hashtag. I opted to create a list of the hashtags I would like to showcase on my site. The list has an `id` and a `regex` because I messed up the hashtags a few times on Instagram and didn&#x27;t want to go back through to fix them.\n\n```typescript filename=src/constants.ts\nexport const HASHTAG_CONFIG = [\n  {\n    id: &#x27;joelmturner_abcs2017&#x27;,\n    regex: /#j.+?2017/gi,\n  },\n  {\n    id: &#x27;joelmturner_featured&#x27;,\n    regex: /#joelmturner_featured/gi,\n  },\n  {\n    id: &#x27;letterclash&#x27;,\n    regex: /#letterclash/gi,\n  },\n  {\n    id: &#x27;inktober2017&#x27;,\n    regex: /#ink.+?2017/gi,\n  },\n  {\n    id: &#x27;inktober2018&#x27;,\n    regex: /#ink.+?2018/gi,\n  },\n  {\n    id: &#x27;inktober2019&#x27;,\n    regex: /#ink.+?2019/gi,\n  },\n  {\n    id: &#x27;inktober2021&#x27;,\n    regex: /#ink.+?2021/gi,\n  },\n  {\n    id: &#x27;handletteredabcs_2016&#x27;,\n    regex: /#handletteredabcs_2016/gi,\n  },\n];\n```\n\nFirst, we&#x27;ll loop over the hashtag config and filter down to the posts that have the hashtags that we want. Then, we&#x27;ll be able to combine the hashtags, if a post has more than one and create an entity that will be easier for the upload step. We can store these in a variable outside of the loop that will be returned at the end of the function.\n\n```typescript filename=src/index.ts line=3-51\nfunction convertInstagramPostToCloudinaryEntity(posts: Post[]): UploadPost[] {\n  console.log(&#x27;🚀 converting posts to Cloudinary&#x27;);\n  const cloudinaryCollection: UploadPost[] = [];\n\n  // check for hashtags in the posts and add to collection\n  HASHTAG_CONFIG.forEach((config) =&gt; {\n    const postGroup = posts?.filter((post) =&gt; {\n      // making sure the post is an image instead of video\n      if (post.media_type !== &#x27;IMAGE&#x27;) {\n        return false;\n      }\n      // combines the text from the first 3 comments\n      const comments =\n        post?.comments?.data?.reduce((acc, comment) =&gt; {\n          acc = `${acc} ${comment?.text}`;\n          return acc;\n        }, &#x27;&#x27;) ?? &#x27;&#x27;;\n\n      const content = `${post?.caption} ${comments}`;\n      // check to see if our regex matches anything in the combined string\n      return content.match(config.regex);\n    });\n\n    // loop over the posts and add to stored variable\n    if (postGroup?.length) {\n      postGroup.forEach((post) =&gt; {\n        const timestamp = new Date(post.timestamp).valueOf();\n        // using a date value as id so it&#x27;s easier to sort by date\n        const combinedId = `${timestamp}_${post.id}`;\n        // see if this post is already in our collection\n        const found = cloudinaryCollection.find(\n          (uploadPost) =&gt; uploadPost.public_id === combinedId\n        );\n\n        if (found) {\n          // combine tags on the entity\n          found.tags = [...found.tags, config.id];\n        } else {\n          // create entity\n          cloudinaryCollection.push({\n            url: post.media_url,\n            public_id: combinedId,\n            folder: &#x27;illustration&#x27;,\n            overwrite: true,\n            tags: [config.id],\n            createdDate: timestamp,\n          });\n        }\n      });\n    }\n  });\n\n  return cloudinaryCollection;\n}\n```\n\n## Upload to Cloudinary\n\nNow that we have an array of Cloudinary-like entities, we&#x27;re ready to move on to uploading to Cloudinary. To achieve this, we&#x27;ll need to make sure we have upload credentials.\n\n### Cloudinary API Credentials\n\nIf you&#x27;re new to Cloudinary, they have a very generous free tier where you can sign up at [cloudinary.com](https://cloudinary.com/) or use this [invite link](https://cloudinary.com/invites/lpov9zyyucivvxsnalc5/ioqt4f3bil10nezrxnml). Once you&#x27;re signed in, you can follow the steps below.\n\nIf you have a Cloudinary account, you can log in and go to Settings -&gt; Security -&gt; Access Keys. Here, you can add a new pair, which will be used in this script.\n\nOnce finished, you should see all the details you&#x27;ll need at the top of your Cloudinary dashboard.\n\n![screenshot of Cloudinary&#x27;s dashboard, showing api credentials](https://res.cloudinary.com/joelmturner/image/upload/v1635257186/Posts/cloudinary-dashboard-credentials.png)\n\n### Cloudinary Client\n\nLet&#x27;s get the Cloudinary client connected. We&#x27;ll need to add some items to our `.env` file.\n\n```bash line=5-8 filename=.env\n# Instagram\nINSTAGRAM_ACCESS_TOKEN=XXXXXX\nINSTAGRAM_ID=XXXXXX\n\n# Cloudinary\nCLOUDINARY_CLOUD_NAME=XXXXXX\nCLOUDINARY_API_KEY=XXXXXX\nCLOUDINARY_API_SECRET=XXXXXX\n```\n\nWe can now use these in our app to help us connect to Cloudinary. Here is the connection config. I placed this at the top of the index file, under the imports.\n\n```typescript filename=src/index.ts\ncloudinary.v2.config({\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n  api_key: process.env.CLOUDINARY_API_KEY,\n  api_secret: process.env.CLOUDINARY_API_SECRET,\n  secure: true,\n});\n```\n\n### Start the Uploads\n\nWe&#x27;re now ready to start the upload process. We&#x27;ll start by creating a new async function because we want to know if all of the uploads made it successfully.\n\n```typescript filename=src/index.ts line=12\nimport { UploadPost } from &#x27;./types&#x27;;\n\nasync function instagramToCloudinary() {\n  // fetch the posts from Instagram\n  const posts = await fetchInstagramPosts();\n\n  if (posts?.length) {\n    // convert the posts by hashtags\n    const cloudinaryCollection: UploadPost[] = convertInstagramPostToCloudinaryEntity(posts);\n\n    // upload to Cloudinary\n    const uploadStatus = await sendToCloudinary(cloudinaryCollection);\n    // trigger a build if posts are pulled successfully\n  }\n}\n```\n\n```typescript filename=src/index.ts\nasync function sendToCloudinary(postGroup: UploadPost[]) {\n  console.log(&#x27;🚀 uploading to Cloudinary&#x27;);\n}\n```\n\nCloudinary doesn&#x27;t have a bulk upload script but their individual upload is very quick and can handle many uploads simultaneously so we can just loop over our entities and send them up. Here&#x27;s the [upload API](https://cloudinary.com/documentation/image_upload_api_reference) we&#x27;ll be using. There are a lot of options that can be adjusted based on the projects&#x27; needs. Here, we&#x27;re just using the basic options.\n\n```typescript filename=src/index.ts line=3-31\nasync function sendToCloudinary(postGroup: UploadPost[]) {\n  console.log(&#x27;🚀 uploading to Cloudinary&#x27;);\n  const resolves = postGroup.map(async ({ public_id, folder, overwrite, tags, url }) =&gt; {\n    try {\n      return new Promise((resolve, reject) =&gt; {\n        cloudinary.v2.uploader.upload(\n          url,\n          {\n            public_id,\n            folder,\n            overwrite,\n            tags,\n          },\n          function (error) {\n            if (error) {\n              reject(error);\n            } else {\n              resolve(&#x27;SUCCESS&#x27;);\n            }\n          }\n        );\n      });\n    } catch (error_1) {\n      console.log(&#x27;😿 Cloudinary upload error&#x27;, error_1);\n    }\n  });\n\n  // make sure all were successful\n  const successfullyResolved = (await Promise.all(resolves)).every((resolve) =&gt; !!resolve);\n\n  return successfullyResolved ? &#x27;SUCCESS&#x27; : &#x27;ERROR&#x27;;\n}\n```\n\nI&#x27;m using an array of promises to help me determine if any had an error while uploading. This may not be necessary for all cases but I like to know, especially before kicking off a new build of the site.\n\nThe last argument in the upload function is a callback that can help us determine if the upload was successful or not. We can check against this in our `successfullyResolved` check and return an appropriate status.\n\n## Trigger Netlify Deploy\n\nIf all the images were uploaded successfully, we&#x27;ll trigger the build on Netlify. First, we&#x27;ll need our Netlify webhook. You can set one up in the deploys settings `https://app.netlify.com/sites/&lt;account&gt;/settings/deploys` under the Build Hooks section. Once you have the hook, you can add that to your `.env` file.\n\n```bash filename=.env line=10-11\n# Instagram\nINSTAGRAM_ACCESS_TOKEN=XXXXXX\nINSTAGRAM_ID=XXXXXX\n\n# Cloudinary\nCLOUDINARY_CLOUD_NAME=XXXXXX\nCLOUDINARY_API_KEY=XXXXXX\nCLOUDINARY_API_SECRET=XXXXXX\n\n# Netlify\nNETLIFY_WEBHOOK=XXXXXX\n```\n\nWe&#x27;ll now set up a conditional build script using `axios`.\n\n```typescript filename=src/index.ts\n// trigger a build if posts are pulled successfully\nif (uploadStatus === &#x27;SUCCESS&#x27;) {\n  axios\n    .post(process.env.NETLIFY_WEBHOOK as string)\n    .then(() =&gt; {\n      console.log(&#x27;🚀 triggered Netlify build&#x27;);\n    })\n    .catch((error) =&gt; {\n      console.log(&#x27;😿 Netlify trigger error&#x27;, error);\n    });\n}\n```\n\nOur script should look something like this now:\n\n```typescript filename=src/index.ts\nimport axios from &#x27;axios&#x27;;\nimport cloudinary from &#x27;cloudinary&#x27;;\nimport { HASHTAG_CONFIG, MAX_POSTS } from &#x27;./constants&#x27;;\nimport { InstagramResponse, Post, UploadPost } from &#x27;./types&#x27;;\nrequire(&#x27;dotenv&#x27;).config();\n\ncloudinary.v2.config({\n  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,\n  api_key: process.env.CLOUDINARY_API_KEY,\n  api_secret: process.env.CLOUDINARY_API_SECRET,\n  secure: true,\n});\n\nasync function sendToCloudinary(postGroup: UploadPost[]) {\n  console.log(&#x27;🚀 uploading to Cloudinary&#x27;);\n  const resolves = postGroup.map(async ({ public_id, folder, overwrite, tags, url }) =&gt; {\n    try {\n      return new Promise((resolve, reject) =&gt; {\n        cloudinary.v2.uploader.upload(\n          url,\n          {\n            public_id,\n            folder,\n            overwrite,\n            tags,\n          },\n          function (error) {\n            if (error) {\n              reject(error);\n            } else {\n              resolve(&#x27;SUCCESS&#x27;);\n            }\n          }\n        );\n      });\n    } catch (error_1) {\n      console.log(&#x27;😿 Cloudinary upload error&#x27;, error_1);\n    }\n  });\n\n  // make sure all were successful\n  const successfullyResolved = (await Promise.all(resolves)).every((resolve) =&gt; !!resolve);\n\n  return successfullyResolved ? &#x27;SUCCESS&#x27; : &#x27;ERROR&#x27;;\n}\n\nasync function fetchInstagramPosts(postRequestError) {\n  try {\n    console.log(&#x27;🚀 fetching Instagram posts&#x27;);\n    const response = await axios.get&lt;InstagramResponse&gt;(\n      `https://graph.facebook.com/v12.0/${process.env.INSTAGRAM_ID}/media?fields=media_url,caption,media_type,timestamp,username,children{media_url},permalink,comments.limit(3){text}&amp;limit=${MAX_POSTS}&amp;access_token=${process.env.INSTAGRAM_ACCESS_TOKEN}`\n    );\n    return response?.data?.data;\n  } catch (error) {\n    postRequestError = error;\n    console.log(&#x27;😿 Instagram fetch error&#x27;, error);\n  }\n}\n\nfunction convertInstagramPostToCloudinaryEntity(posts: Post[]): UploadPost[] {\n  console.log(&#x27;🚀 converting posts to Cloudinary&#x27;);\n  const cloudinaryCollection: UploadPost[] = [];\n\n  // check for hashtags in the posts and add to collection\n  HASHTAG_CONFIG.forEach((config) =&gt; {\n    const postGroup = posts?.filter((post) =&gt; {\n      // making sure the post is an image instead of video\n      if (post.media_type !== &#x27;IMAGE&#x27;) {\n        return false;\n      }\n      // combines the text from the first 3 comments\n      const comments =\n        post?.comments?.data?.reduce((acc, comment) =&gt; {\n          acc = `${acc} ${comment?.text}`;\n          return acc;\n        }, &#x27;&#x27;) ?? &#x27;&#x27;;\n\n      const content = `${post?.caption} ${comments}`;\n      // check to see if our regex matches anything in the combined string\n      return content.match(config.regex);\n    });\n\n    // loop over the posts and add to stored variable\n    if (postGroup?.length) {\n      postGroup.forEach((post) =&gt; {\n        const timestamp = new Date(post.timestamp).valueOf();\n        // using a date value as id so it&#x27;s easier to sort by date\n        const combinedId = `${timestamp}_${post.id}`;\n        // see if this post is already in our collection\n        const found = cloudinaryCollection.find(\n          (uploadPost) =&gt; uploadPost.public_id === combinedId\n        );\n\n        if (found) {\n          // combine tags on the entity\n          found.tags = [...found.tags, config.id];\n        } else {\n          // create entity\n          cloudinaryCollection.push({\n            url: post.media_url,\n            public_id: combinedId,\n            folder: &#x27;illustration&#x27;,\n            overwrite: true,\n            tags: [config.id],\n            createdDate: timestamp,\n          });\n        }\n      });\n    }\n  });\n\n  return cloudinaryCollection;\n}\n\nasync function instagramToCloudinary() {\n  let postRequestError = null;\n\n  // fetch the posts from Instagram\n  const posts = await fetchInstagramPosts(postRequestError);\n\n  if (posts?.length) {\n    // convert the posts by hashtags\n    const cloudinaryCollection: UploadPost[] = convertInstagramPostToCloudinaryEntity(posts);\n\n    // upload to Cloudinary\n    const uploadStatus = await sendToCloudinary(cloudinaryCollection);\n\n    // trigger a build if posts are pulled successfully\n    if (!postRequestError &amp;&amp; uploadStatus === &#x27;SUCCESS&#x27;) {\n      axios\n        .post(process.env.NETLIFY_WEBHOOK as string)\n        .then(() =&gt; {\n          console.log(&#x27;🚀 triggered Netlify build&#x27;);\n        })\n        .catch((error) =&gt; {\n          console.log(&#x27;😿 Netlify trigger error&#x27;, error);\n        });\n    }\n  }\n\n  // for local debugging\n  //   fs.writeFile(&quot;test.json&quot;, JSON.stringify(cloudinaryCollection, null, 2), (err: any) =&gt; {\n  //     if (err) {\n  //       console.error(err);\n  //       return;\n  //     }\n  //     //file written successfully\n  //   });\n}\n\n// fire the script\ninstagramToCloudinary();\n```\n\n## Github Action to Run on Schedule\n\nIn your Github project you can create an action and use the following config for a daily run.\n\n```yml\n# This is a basic workflow to help you get started with Actions\n\nname: Post Fetch and Deploy\n\n# Controls when the workflow will run\non:\n  schedule:\n    - cron: &#x27;0 0 * * *&#x27;\n\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called &quot;build&quot;\n  build:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    strategy:\n      matrix:\n        node-version: [14.17.x]\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\n      - uses: actions/checkout@v2\n\n      - name: Using Node version ${{ matrix.node-version }}\n        uses: actions/setup-node@v1\n        with:\n          node-version: ${{ matrix.node-version }}\n      - name: create env file\n        run: |\n          MY_STRING=$(cat &lt;&lt; EOF\n          INSTAGRAM_ACCESS_TOKEN =${{secrets.INSTAGRAM_ACCESS_TOKEN}}\n          INSTAGRAM_ID =${{secrets.INSTAGRAM_ID}}\n          CLOUDINARY_CLOUD_NAME =${{secrets.CLOUDINARY_CLOUD_NAME}}\n          CLOUDINARY_API_KEY =${{secrets.CLOUDINARY_API_KEY}}\n          CLOUDINARY_API_SECRET =${{secrets.CLOUDINARY_API_SECRET}}\n          NETLIFY_WEBHOOK =${{secrets.NETLIFY_WEBHOOK}}\n          EOF\n          )\n          touch .env\n          echo &quot;$MY_STRING&quot; &gt;&gt; .env\n      - run: yarn\n      - run: yarn start\n```\n\nThe `- cron: &quot;0 0 * * *&quot;` is what configures the action to run once a day.\n\n## Conclusion\n\nOffloading my Instagram posts to Cloudinary has made my site build more reliably, especially when I&#x27;m doing local development. The Cloudinary API has been rock solid for me so far and it&#x27;s easier to work with.\n\nHopefully, this process is broken up enough that any service could be swapped out for another with little effort. I can see other social channels being aggregated into this pipeline as well.\n",
            "url": "https://joelmturner.com/blog/instagram-cloudinary",
            "title": "Instagram to Cloudinary",
            "summary": "Setting up a GitHub Action to upload images to Cloudinary from Instagram. This solves some of the issues that I was having with getting Instagram images into Gatsby.",
            "date_modified": "2021-11-01T16:08:43.532Z",
            "author": {
                "name": "Joel M Turner",
                "url": "https://twitter.com/joelmturner"
            }
        },
        {
            "id": "https://joelmturner.com/blog/sequential-interval-react-hook",
            "content_html": "<p><em>(The post <a href=\"https://joelmturner.com/blog/sequential-interval-react-hook\">Sequential Interval React Hook</a> appeared first on <a href=\"https://joelmturner.com\">Joel M Turner Blog</a>.)</em></p>\nimport { CodeSandbox } from &#x27;mdx-embed&#x27;;\n\nCreate a React hook that can simulate a pulse-like cycle between animation states through different durations per animation state.\n\n## tl;dr\n\nHere&#x27;s the hook in an example.\n\n&lt;CodeSandbox codeSandboxId=&quot;sequential-interval-react-hook-19qys&quot; /&gt;\n\n## Background\n\nWe have an animation heartbeat player that switches between four animation states, each with its own user-configurable duration.\n\nWe have a ping service that sends out a ping to our component on an interval, or heartbeat, and each ping kicks off an animation cycle. This cycle goes through the sequence: `rest` -&gt; `tick` -&gt; `exit` -&gt; `enter` -&gt; `rest`.\n\nThe original implementation was built into a class component using a local [MobX](https://mobx.js.org/) observable and nested `setTimeout`s and has worked very well for the past few years.\n\nThis is a rough idea of how the nested `setTimeout`s are set up inside of the ping.\n\n```tsx\nthis.animationState = &#x27;tick&#x27;;\nsetTimeout(\n  action(() =&gt; {\n    this.animationState = &#x27;exit&#x27;;\n    setTimeout(\n      action(() =&gt; {\n        this.animationState = &#x27;enter&#x27;;\n        setTimeout(\n          action(() =&gt; {\n            this.animationState = &#x27;rest&#x27;;\n          })\n        );\n      }),\n      widget.tickLength\n    );\n  }),\n  widget.tickDelay\n);\n```\n\nWe&#x27;re at a point where we need to update the renderer housing this logic and I thought I would attempt to do it with a functional component.\n\n## Criteria\n\nThe four animation states we need to switch between are `tick`, `exit`, `enter`, and `rest`; while each of our widgets has CSS animations that are tied to a `className` of `status_[animationState]`.\n\nEach of these animation states needs its own duration that is user-configurable.\n\n## Attempts\n\nFirst, I tried to implement something similar to what we see above in a `useEffect` and `setState`. The downside here is that the `useEffect` is new every render so I wasn&#x27;t able to track timeouts effectively.\n\nThe second thing I tried, was to leverage the [`useInterval` hook](https://overreacted.io/making-setinterval-declarative-with-react-hooks/) that Dan Abramov created. The downside here is that the callback is a `ref` so it never changes, which means I can&#x27;t pass it a different callback for each step/duration.\n\nFinally, I settled on a mix of `ref`s for persistence and a custom hook to handle the `setTimeout`s.\n\n## Research\n\nI thought I would be able to jam the `setTimeout`s in an array and use a `for of` loop to run them, one by one. This ended up running them &quot;out of order.&quot;\n\nI ended up coming across two solutions that helped me piece it together, [How to resolve a useReducer&#x27;s dispatch function inside a promise in ReactJS](https://stackoverflow.com/a/60360051) and [Why Using reduce() to Sequentially Resolve Promises Works](https://css-tricks.com/why-using-reduce-to-sequentially-resolve-promises-works/).\n\nThe idea here is that each is wrapped in a `Promise` and added to an array where we can loop over them in a `reduce`, awaiting the previous `Promise` before starting the next.\n\nThis worked like a charm!\n\n## Creating the `useStepInterval` Hook\n\nThe custom hook is where the magic lies. We start with two `useState`s, one for the animation state and another to determine if the animation cycle is running. We&#x27;ll return the `status` and the ability to set `isRunning` so our component can turn it on/off.\n\n```ts\nimport { useState, useEffect, SetStateAction, Dispatch } from &#x27;react&#x27;;\n\n// steps through the heartbeat animation states\nexport function useStepInterval&lt;StatusType&gt;(\n  initialStatus: StatusType,\n  steps: { status: StatusType; delay: number }[]\n): { status: StatusType; setIsRunning: Dispatch&lt;SetStateAction&lt;boolean&gt;&gt; } {\n  const [status, setStatus] = useState&lt;StatusType&gt;(initialStatus);\n  const [isRunning, setIsRunning] = useState(false);\n\n  return { status, setIsRunning };\n}\n```\n\nNext, we set up a `useEffect` that will watch `isRunning` to see if the cycle should start. In this hook, we&#x27;ll have two functions, one that sets up the `Promise`s and another that will run the `reduce` over the `Promise`s.\n\n```ts\nimport { useState, useEffect, SetStateAction, Dispatch } from &#x27;react&#x27;;\n\n// steps through the heartbeat animation states\nexport function useStepInterval&lt;StatusType&gt;(\n  initialStatus: StatusType,\n  steps: { status: StatusType; delay: number }[]\n): { status: StatusType; setIsRunning: Dispatch&lt;SetStateAction&lt;boolean&gt;&gt; } {\n  const [status, setStatus] = useState&lt;StatusType&gt;(initialStatus);\n  const [isRunning, setIsRunning] = useState(false);\n\n  useEffect(() =&gt; {\n    function setUpPromise(step, index): Promise&lt;void&gt; {\n      // we&#x27;re returning a promise that will clean up after itself\n      return new Promise((resolve, reject) =&gt; {\n        const wait = setTimeout(() =&gt; {\n          // clear previous setTimeout\n          clearTimeout(wait);\n\n          // set the status of the step\n          setStatus(step.status);\n\n          // if it&#x27;s the last item, stop the cycle\n          if (index === steps.length - 1) {\n            setIsRunning(false);\n          }\n\n          resolve();\n\n          // use the duration of the previous to this step\n        }, step.delay);\n      });\n    }\n\n    // using a reduce allows us to wait for the previous promise to resolve\n    // before starting the next more info at\n    // https://css-tricks.com/why-using-reduce-to-sequentially-resolve-promises-works/\n    function stepThrough() {\n      return steps.reduce(async (previousPromise, nextStep, index) =&gt; {\n        await previousPromise;\n        return setUpPromise(nextStep, index);\n      }, Promise.resolve());\n    }\n\n    if (isRunning) {\n      stepThrough();\n    }\n  }, [isRunning]);\n\n  return { status, setIsRunning };\n}\n```\n\n## Using the `useStepInterval` Hook\n\nIn our component, we can now run our hook and have a `ref` that catches the ping from our player service, which sets `isRunning` to `true`, starting the animation cycle.\n\n```tsx\ntype AnimationState = &quot;tick&quot; | &quot;exit&quot; | &quot;enter&quot; | &quot;rest&quot;;\n\n// these steps can be inside the app if the values are dynamic\nconst ANIMATION_STEPS: { status: AnimationState; delay: number }[] = [\n  { status: &quot;tick&quot;, delay: 0 },\n  { status: &quot;exit&quot;, delay: 300 },\n  { status: &quot;enter&quot;, delay: 1500 },\n  { status: &quot;rest&quot;, delay: 300 }\n];\n\nexport function MyComponent() {\n\n  const { status, setIsRunning } = useStepInterval&lt;AnimationState&gt;(\n    &quot;rest&quot;,\n    ANIMATION_STEPS\n  );\n\n  // this is the callback that receives the type of player status\n  // that&#x27;s coming in and fires a our running state\n  const playerCallback = useRef((playerStatus) =&gt; {\n    switch (playerStatus) {\n      case &quot;ping&quot;:\n        setIsRunning(true);\n        break;\n\n      case &quot;idle&quot;:\n      default:\n        break;\n    }\n  });\n```\n\nNow we have an animation cycler that can be started from our component, and the best part is, we can have our component be functional 😀.\n\nI definitely learned more about `refs` and how to work with promises during this feature. Hopefully, there will some more refactors to a functional component that can challenge other areas.\n",
            "url": "https://joelmturner.com/blog/sequential-interval-react-hook",
            "title": "Sequential Interval React Hook",
            "summary": "Create a React hook that can simulate a pulse-like cycle between animation states through different durations per animation state.",
            "date_modified": "2021-04-08T00:00:00.000Z",
            "author": {
                "name": "Joel M Turner",
                "url": "https://twitter.com/joelmturner"
            }
        },
        {
            "id": "https://joelmturner.com/blog/svelte-animated-water-svg-pictorial-fraction",
            "content_html": "<p><em>(The post <a href=\"https://joelmturner.com/blog/svelte-animated-water-svg-pictorial-fraction\">Animated SVG Water Pictorial Fraction in Svelte</a> appeared first on <a href=\"https://joelmturner.com\">Joel M Turner Blog</a>.)</em></p>\nimport { CodeSandbox } from &#x27;mdx-embed&#x27;;\n\nOne of my favorite charts in data visualization is [Pictorial Fraction](https://datavizproject.com/data-type/pictorial-fraction-chart/). It&#x27;s essentially a bar chart as a shape that can be partially filled or used as a [small multiple](https://datavizproject.com/data-type/fraction-of-pictograms/) to represent the ratio.\n\n## What We&#x27;re Building\n\n&lt;CodeSandbox codeSandboxId=&quot;svelte-svg-pictorial-fraction-f1hv2&quot; /&gt;\n\n## Why Svelte.js?\n\nI&#x27;ve been excited to check out [svelte.js](https://svelte.dev/) for a while and this winter break gave me some time to try it out. It seemed especially great as a way to run data vis in a light-weight way. This was a way to learn a little more about it and see I can make multiple components.\n\n## The Pieces\n\nThe pictorial fraction is a combination of svg pieces that come together to show and mask elements.\n\n## Fill Area\n\nLet&#x27;s create a new file and call it `PictorialFraction.svelte`. In here, we&#x27;ll set up our svg and add a rectangle with a color of your choosing. This will be the color that will show up in the droplet.\n\n```html filename=PictorialFraction.svelte\n&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;264.5&quot; height=&quot;264.5&quot;&gt;\n  &lt;rect width=&quot;264.5&quot; height=&quot;264.5&quot; fill=&quot;#ff9900&quot; /&gt;\n&lt;/svg&gt;\n```\n\nNow we can add some variables for width and height. In svelte, we export these in the script tag. We can also pass those variables into the elements.\n\n```html 1-4,6-7\n&lt;script&gt;\n  export let width;\n  export let height;\n&lt;/script&gt;\n\n&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;{width}&quot; height=&quot;{height}&quot;&gt;\n  &lt;rect width=&quot;{width}&quot; height=&quot;{height}&quot; fill=&quot;#ff9900&quot; /&gt;\n&lt;/svg&gt;\n```\n\n💡 Svelte tip: we can use a shortcut to add those variables since they have the same name as the attributes. Instead of `&lt;svg width={width} /&gt;` we can use `&lt;svg width /&gt;`.\n\nLet&#x27;s position the rectangle using `transform: translate(0, 20px);`. This should allow us to `slide` the rectangle up using the y position, giving our mask the feeling that the water drop is filling up. We&#x27;re using the style attribute for transform rather than the `transform` attribute on `rect` because Safari doesn&#x27;t animate the attribute in the same way Chrome and Firefox do, making it choppy.\n\n```html line=7\n&lt;script&gt;\n  export let width;\n  export let height;\n&lt;/script&gt;\n\n&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;{width}&quot; height=&quot;{height}&quot;&gt;\n  &lt;rect\n    width=&quot;{width}&quot;\n    height=&quot;{height}&quot;\n    style=&quot;{`transform:&quot;\n    translate(0,\n    20px);`}\n    fill=&quot;#ff9900&quot;\n  /&gt;\n&lt;/svg&gt;\n```\n\nNow we&#x27;ll create the ripple shape that will be placed on top of our rectangle to give a &quot;fluid&quot; feel. For this, we&#x27;ll use a `path` element and animate it with css.\n\n```html\n&lt;path\n  class=&quot;water&quot;\n  d=&quot;M420 20.0047C441.5 19.6047 458.8 17.5047 471.1 15.5047C484.5 13.3047 497.6 10.3047 498.4 10.1047C514 6.50474 518 4.70474 528.5 2.70474C535.6 1.40474 546.4 -0.0952561 560 0.00474393V20.0047H420ZM420 20.0047C398.5 19.6047 381.2 17.5047 368.9 15.5047C355.5 13.3047 342.4 10.3047 341.6 10.1047C326 6.50474 322 4.70474 311.5 2.70474C304.3 1.40474 293.6 -0.0952561 280 0.00474393V20.0047H420ZM140 20.0047C118.5 19.6047 101.2 17.5047 88.9 15.5047C75.5 13.3047 62.4 10.3047 61.6 10.1047C46 6.50474 42 4.70474 31.5 2.70474C24.3 1.40474 13.6 -0.0952561 0 0.00474393V20.0047H140ZM140 20.0047C161.5 19.6047 178.8 17.5047 191.1 15.5047C204.5 13.3047 217.6 10.3047 218.4 10.1047C234 6.50474 238 4.70474 248.5 2.70474C255.6 1.40474 266.4 -0.0952561 280 0.00474393V20.0047H140Z&quot;\n/&gt;\n```\n\nThat creates the shape, and now we&#x27;ll position it to be on top of the rectangle. To do this we&#x27;ll need to know where the rectangle will be positioned, and we&#x27;ll wrap the `path` in group that&#x27;s positioned based on `rect`&#x27;s y position.\n\n```html line=9-11\n&lt;script&gt;\n  export let width;\n  export let height;\n&lt;/script&gt;\n\n&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;{width}&quot; height=&quot;{height}&quot;&gt;\n  &lt;rect\n    width=&quot;{width}&quot;\n    height=&quot;{height}&quot;\n    style=&quot;{`transform:&quot;\n    translate(0,\n    20px);`}\n    fill=&quot;#ff9900&quot;\n  /&gt;\n\n  &lt;g class=&quot;water-container&quot; style=&quot;{`transform:&quot; translate(0, 0);`}&gt;\n    &lt;path\n      class=&quot;water&quot;\n      d=&quot;M420 20.0047C441.5 19.6047 458.8 17.5047 471.1 15.5047C484.5 13.3047 497.6 10.3047 498.4 10.1047C514 6.50474 518 4.70474 528.5 2.70474C535.6 1.40474 546.4 -0.0952561 560 0.00474393V20.0047H420ZM420 20.0047C398.5 19.6047 381.2 17.5047 368.9 15.5047C355.5 13.3047 342.4 10.3047 341.6 10.1047C326 6.50474 322 4.70474 311.5 2.70474C304.3 1.40474 293.6 -0.0952561 280 0.00474393V20.0047H420ZM140 20.0047C118.5 19.6047 101.2 17.5047 88.9 15.5047C75.5 13.3047 62.4 10.3047 61.6 10.1047C46 6.50474 42 4.70474 31.5 2.70474C24.3 1.40474 13.6 -0.0952561 0 0.00474393V20.0047H140ZM140 20.0047C161.5 19.6047 178.8 17.5047 191.1 15.5047C204.5 13.3047 217.6 10.3047 218.4 10.1047C234 6.50474 238 4.70474 248.5 2.70474C255.6 1.40474 266.4 -0.0952561 280 0.00474393V20.0047H140Z&quot;\n    /&gt;\n  &lt;/g&gt;\n&lt;/svg&gt;\n```\n\nLet&#x27;s add our styles to get the ripples animating in smooth way. To do this we can add a `&lt;style&gt;` tag underneath our `&lt;script&gt;` tag.\n\n```html line=6-22\n&lt;script&gt;\n  export let width;\n  export let height;\n&lt;/script&gt;\n\n&lt;style&gt;\n  rect,\n  .water-container {\n    transition: transform 500ms;\n  }\n\n  .water {\n    animation: ripple 1.4s infinite linear;\n    fill: #ff9900;\n  }\n\n  @keyframes ripple {\n    100% {\n      transform: translate3d(-105%, 0, 0);\n    }\n  }\n&lt;/style&gt;\n\n&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;{width}&quot; height=&quot;{height}&quot;&gt;\n  &lt;rect\n    width=&quot;{width}&quot;\n    height=&quot;{height}&quot;\n    style=&quot;{`transform:&quot;\n    translate(0,\n    20px);`}\n    fill=&quot;#ff9900&quot;\n  /&gt;\n\n  &lt;g class=&quot;water-container&quot; style=&quot;{`transform:&quot; translate(0, 0);`}&gt;\n    &lt;path\n      class=&quot;water&quot;\n      d=&quot;M420 20.0047C441.5 19.6047 458.8 17.5047 471.1 15.5047C484.5 13.3047 497.6 10.3047 498.4 10.1047C514 6.50474 518 4.70474 528.5 2.70474C535.6 1.40474 546.4 -0.0952561 560 0.00474393V20.0047H420ZM420 20.0047C398.5 19.6047 381.2 17.5047 368.9 15.5047C355.5 13.3047 342.4 10.3047 341.6 10.1047C326 6.50474 322 4.70474 311.5 2.70474C304.3 1.40474 293.6 -0.0952561 280 0.00474393V20.0047H420ZM140 20.0047C118.5 19.6047 101.2 17.5047 88.9 15.5047C75.5 13.3047 62.4 10.3047 61.6 10.1047C46 6.50474 42 4.70474 31.5 2.70474C24.3 1.40474 13.6 -0.0952561 0 0.00474393V20.0047H140ZM140 20.0047C161.5 19.6047 178.8 17.5047 191.1 15.5047C204.5 13.3047 217.6 10.3047 218.4 10.1047C234 6.50474 238 4.70474 248.5 2.70474C255.6 1.40474 266.4 -0.0952561 280 0.00474393V20.0047H140Z&quot;\n    /&gt;\n  &lt;/g&gt;\n&lt;/svg&gt;\n```\n\nWe declare a `keyframes` animation and let `.water` leverage that in an infinite loop. We&#x27;re adding a transition to the rectangle and container for the ripple to make sure it slides up and down smoothly.\n\n## Mask Area\n\nNow we can work on the mask area which will give us the water drop shape. We&#x27;re going to use a `clipPath` with a path shaped as a water droplet. We&#x27;ll apply the clipPath to a group that wraps the rectangle and ripple to mask out anything outside the water droplet shape.\n\nWe fill the droplet path with black to make the mask full opacity. We can then add another droplet of a different color so that we can have a different background color for our `empty` section.\n\n```html line=2-4,6,8,14\n&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;{width}&quot; height=&quot;{height}&quot;&gt;\n  &lt;clipPath id=&quot;mask_shape&quot;&gt;\n    &lt;path\n      d=&quot;M132.281 264.564c51.24 0 92.931-41.681 92.931-92.918 0-50.18-87.094-164.069-90.803-168.891L132.281 0l-2.128 2.773c-3.704 4.813-90.802 118.71-90.802 168.882.001 51.228 41.691 92.909 92.93 92.909z&quot;\n      fill=&quot;#000000&quot;\n    /&gt;\n  &lt;/clipPath&gt;\n\n  &lt;path\n    d=&quot;M132.281 264.564c51.24 0 92.931-41.681 92.931-92.918 0-50.18-87.094-164.069-90.803-168.891L132.281 0l-2.128 2.773c-3.704 4.813-90.802 118.71-90.802 168.882.001 51.228 41.691 92.909 92.93 92.909z&quot;\n    fill=&quot;#555&quot;\n  /&gt;\n\n  &lt;g clip-path=&quot;url(#mask_shape)&quot;&gt;\n    &lt;rect\n      width=&quot;{width}&quot;\n      height=&quot;{height}&quot;\n      style=&quot;{`transform:&quot;\n      translate(0,\n      20px);`}\n      fill=&quot;#ff9900&quot;\n    /&gt;\n\n    &lt;g class=&quot;water-container&quot; style=&quot;{`transform:&quot; translate(0, 0);`}&gt;\n      &lt;path\n        class=&quot;water&quot;\n        d=&quot;M420 20.0047C441.5 19.6047 458.8 17.5047 471.1 15.5047C484.5 13.3047 497.6 10.3047 498.4 10.1047C514 6.50474 518 4.70474 528.5 2.70474C535.6 1.40474 546.4 -0.0952561 560 0.00474393V20.0047H420ZM420 20.0047C398.5 19.6047 381.2 17.5047 368.9 15.5047C355.5 13.3047 342.4 10.3047 341.6 10.1047C326 6.50474 322 4.70474 311.5 2.70474C304.3 1.40474 293.6 -0.0952561 280 0.00474393V20.0047H420ZM140 20.0047C118.5 19.6047 101.2 17.5047 88.9 15.5047C75.5 13.3047 62.4 10.3047 61.6 10.1047C46 6.50474 42 4.70474 31.5 2.70474C24.3 1.40474 13.6 -0.0952561 0 0.00474393V20.0047H140ZM140 20.0047C161.5 19.6047 178.8 17.5047 191.1 15.5047C204.5 13.3047 217.6 10.3047 218.4 10.1047C234 6.50474 238 4.70474 248.5 2.70474C255.6 1.40474 266.4 -0.0952561 280 0.00474393V20.0047H140Z&quot;\n      /&gt;\n    &lt;/g&gt;\n  &lt;/g&gt;\n&lt;/svg&gt;\n```\n\n## Fill\n\nCool, now that we have the mask and bar set up we can configure the logic for the filling of the droplet. For this we&#x27;ll create a variable of `ratio` and a [reactive declaration](https://svelte.dev/tutorial/reactive-declarations) that updates when props change. We&#x27;ll call our reactive declaration `offsetY` and it will be based on `ratio` and `height`.\n\n```html line=4,6-7\n&lt;script&gt;\n  export let width;\n  export let height;\n  export let ratio;\n\n  // offset should help the bar &quot;fill&quot; from the bottom\n  $: offsetY = height - height * ratio;\n&lt;/script&gt;\n```\n\nNow we&#x27;ll pass that offset to the rectangle and ripple container, so they&#x27;ll be positioned together. If the ratio is zero, the y should be the negative height of the ripple path which is 19px.\n\n```html line=9,11\n&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width={width} height={height} viewbox=&#x27;0 0 264 264&#x27; &gt;\n  &lt;clipPath id=&#x27;mask_shape&#x27; &gt;\n    &lt;path d=&quot;M132.281 264.564c51.24 0 92.931-41.681 92.931-92.918 0-50.18-87.094-164.069-90.803-168.891L132.281 0l-2.128 2.773c-3.704 4.813-90.802 118.71-90.802 168.882.001 51.228 41.691 92.909 92.93 92.909z&quot; fill=&quot;#000000&quot; /&gt;\n  &lt;/clipPath&gt;\n\n  &lt;path d=&quot;M132.281 264.564c51.24 0 92.931-41.681 92.931-92.918 0-50.18-87.094-164.069-90.803-168.891L132.281 0l-2.128 2.773c-3.704 4.813-90.802 118.71-90.802 168.882.001 51.228 41.691 92.909 92.93 92.909z&quot; fill=&quot;#555&quot;/&gt;\n\n  &lt;g clip-path=&#x27;url(#mask_shape)&#x27;&gt;\n    &lt;rect width={width} height={height} style={`transform: translate(0, ${offsetY}px)`} fill=&quot;#ff9900&quot; /&gt;\n\n    &lt;g class=&#x27;water-container&#x27; style={`transform: translate(0, ${ratio === 0 ? offsetY : offsetY - 19}px);`}&gt;\n      &lt;path class=&#x27;water&#x27; d=&quot;M420 20.0047C441.5 19.6047 458.8 17.5047 471.1 15.5047C484.5 13.3047 497.6 10.3047 498.4 10.1047C514 6.50474 518 4.70474 528.5 2.70474C535.6 1.40474 546.4 -0.0952561 560 0.00474393V20.0047H420ZM420 20.0047C398.5 19.6047 381.2 17.5047 368.9 15.5047C355.5 13.3047 342.4 10.3047 341.6 10.1047C326 6.50474 322 4.70474 311.5 2.70474C304.3 1.40474 293.6 -0.0952561 280 0.00474393V20.0047H420ZM140 20.0047C118.5 19.6047 101.2 17.5047 88.9 15.5047C75.5 13.3047 62.4 10.3047 61.6 10.1047C46 6.50474 42 4.70474 31.5 2.70474C24.3 1.40474 13.6 -0.0952561 0 0.00474393V20.0047H140ZM140 20.0047C161.5 19.6047 178.8 17.5047 191.1 15.5047C204.5 13.3047 217.6 10.3047 218.4 10.1047C234 6.50474 238 4.70474 248.5 2.70474C255.6 1.40474 266.4 -0.0952561 280 0.00474393V20.0047H140Z&quot;/&gt;\n    &lt;/g&gt;\n  &lt;/g&gt;\n&lt;/svg&gt;\n```\n\n## Using the component\n\nTo use this component we import it and pass it our width, height and ratio. Let&#x27;s give it a height and width of 264.5px and a ratio of 0.5 (50%). Update the ratio to see the droplet fill or drain smoothly.\n\n```html filename=App.svelte\n&lt;script&gt;\n  import PictorialFraction from &#x27;./PictorialFraction.svelte&#x27;;\n&lt;/script&gt;\n\n&lt;main&gt;\n  &lt;PictorialFraction width=&quot;{264.5}&quot; height=&quot;{264.5}&quot; ratio=&quot;{0.5}&quot; /&gt;\n&lt;/main&gt;\n```\n\n## Conclusion\n\nThanks for following along! We now have a droplet component that we can use in our svelte app. We can add ways to control the ratio and make it more interactive. To add buttons to control the increase/decrease, check out the example on [codesandbox](https://codesandbox.io/s/svelte-svg-pictorial-fraction-f1hv2?from-embed=&amp;file=/App.svelte)\n",
            "url": "https://joelmturner.com/blog/svelte-animated-water-svg-pictorial-fraction",
            "title": "Animated SVG Water Pictorial Fraction in Svelte",
            "summary": "Create a pictorial fraction of water in SVG using Svelte. Allows for percentage progress so the image looks like it's filling or draining.",
            "date_modified": "2021-01-04T00:00:00.000Z",
            "author": {
                "name": "Joel M Turner",
                "url": "https://twitter.com/joelmturner"
            }
        },
        {
            "id": "https://joelmturner.com/blog/create-a-single-line-chart-in-react-with-@vx",
            "content_html": "<p><em>(The post <a href=\"https://joelmturner.com/blog/create-a-single-line-chart-in-react-with-@vx\">Create a Single Line Chart in React with @vx</a> appeared first on <a href=\"https://joelmturner.com\">Joel M Turner Blog</a>.)</em></p>\nimport { CodeSandbox } from &#x27;mdx-embed&#x27;;\n\n&lt;Note&gt;\n\n_Update: October 2020_ - @vx is now [@visx](https://github.com/airbnb/visx) and is at 1.0. You can read about [the update from Airbnb Engineering](https://medium.com/airbnb-engineering/introducing-visx-from-airbnb-fd6155ac4658). As of this update, the api is all the same, and it has TypeScript support 👍.\n\n&lt;/Note&gt;\n\nWe’ve built a [bar chart](/blog/data-vis-react-bar-chart-vx/) in react using the data vis library [@vx](https://github.com/hshoff/vx). The next chart that we can build to help tell our data’s story is a line chart. Line charts are great for showing trends over time and that’s what we’ll build today.\n\n## What We&#x27;re Building TL;DR\n\n&lt;CodeSandbox codeSandboxId=&quot;single-line-chart-with-vx-322xd&quot; /&gt;\n\n## Requirements\n\n- [ ] Display time along the x-axis\n- [ ] Display metrics along the y-axis\n- [ ] Show each data point on line\n\n## Packages\n\nLet&#x27;s start by getting the packages we need from @vx. We&#x27;ll need shapes, scale, axis, gradient (easy background color), and some mock data to get started.\n\n```bash\n  yarn add @vx/shapes @vx/group @vx/scale @vx/axis @vx/curve @vx/gradient @vx/text\n```\n\nOr\n\n```bash\n  npm install @vx/shapes @vx/group @vx/scale @vx/axis @vx/curve @vx/gradient @vx/text --save\n```\n\n## Data\n\nNow that we have our packages we can start stubbing out our data. We&#x27;re going to use some mock data to get started so feel free to create your own or use this data set.\n\n```js\nconst defaultData1 = [\n  {\n    miles: 5.6,\n    date: 1595228400000,\n  },\n  {\n    miles: 3.2,\n    date: 1595314800000,\n  },\n  {\n    miles: 7.9,\n    date: 1595401200000,\n  },\n  {\n    miles: 4.1,\n    date: 1595487600000,\n  },\n  {\n    miles: 9.3,\n    date: 1595574000000,\n  },\n];\n```\n\nNow that we have the shape of our data we can add some helper functions that will access those items. This will help us add the date across the x-axis and the miles along the y-axis. We&#x27;ll see how these come into play a little later.\n\n```js\n// accessors return the miles and date of that data item\nconst x = (d) =&gt; d.miles;\nconst y = (d) =&gt; d.date;\n```\n\n## Scales\n\nWe can now define the max height and max width that we would like our chart to be. Our component will take height and width as props and then we can add a little padding. This will help us as we define our scales for this chart.\n\n```js\n// bounds\nconst xMax = width - 120;\nconst yMax = height - 80;\n```\n\nThe scales are where the magic really happen. It all comes down to `domain` and `range`. The general rule of thumb based on my understanding is that `domain` is the lowest and highest data points. The `range` is the pixel range we would like to plot these data points on.\n\nIn our scales below we can see that `range` (`rangeRound`) is from `0` to `xMax` which is the height bound of our chart. @vx gives us a helper, `rangeRound`, that prettifies the numbers.\n\nThe `domain` is an array of all data points which resolves to lowest (4.1) and highest (9.3) of the data set.\n\n```js\nconst xScale = scaleTime({\n  rangeRound: [0, xMax],\n  domain: [Math.min(...data.map(x)), Math.max(...data.map(x))],\n});\n\nconst yScale = scaleLinear({\n  rangeRound: [0, yMax],\n  domain: [Math.max(...data.map(y)), 0],\n});\n```\n\n## Building our Line Chart\n\nNow we can start building the component. Let&#x27;s start by setting up the `svg` that will hold our line and axes.\n\n```jsx\nimport React from &#x27;react&#x27;;\nimport { Group } from &#x27;@vx/group&#x27;;\nimport { scaleTime, scaleLinear } from &#x27;@vx/scale&#x27;;\n\n// dimensions\nconst height = 500;\nconst width = 800;\n\n// accessors\nconst x = (d) =&gt; new Date(d.date).valueOf();\nconst y = (d) =&gt; d.miles;\n\nconst LineChart = ({ data = [] }) =&gt; {\n  // bounds\n  const xMax = width - 120;\n  const yMax = height - 80;\n\n  const xScale = scaleTime({\n    rangeRound: [0, xMax],\n    domain: [Math.min(...data.map(x)), Math.max(...data.map(x))],\n  });\n\n  const yScale = scaleLinear({\n    rangeRound: [0, yMax],\n    domain: [Math.max(...data.map(y)), 0],\n  });\n\n  return (\n    &lt;svg width={width} height={height}&gt;\n      &lt;Group top={25} left={65}&gt;&lt;/Group&gt;\n    &lt;/svg&gt;\n  );\n};\n\nexport default LineChart;\n```\n\nLooks good. The first thing we&#x27;ll add is the y-axis. To do this we use [`AxisLeft`](https://vx-demo.now.sh/docs/axis#AxisLeft) from @vx. We need to pass it our yScale and we&#x27;ll give it a few other props for styling. The `numTicks` limits the number of values shown on the y-axis and `label` is what will display along the axis.\n\nThen we&#x27;ll add the [`AxisBottom`](https://vx-demo.now.sh/docs/axis#AxisBottom) that has similar props to `AxisLeft`. The `top` is where it should start vertically from the top, which is the chart height in this case. The `labelOffset` prop dictates how much space is in between the ticks and the axis label. It should look like this:\n\n```jsx line=4,9-10\nimport React from &quot;react&quot;\nimport { Group } from &quot;@vx/group&quot;\nimport { scaleTime, scaleLinear } from &quot;@vx/scale&quot;\nimport { AxisLeft, AxisBottom } from &quot;@vx/axis&quot;\n\n...\n\n&lt;Group top={25} left={65}&gt;\n  &lt;AxisLeft scale={yScale} numTicks={4} label=&quot;Miles&quot; /&gt;\n  &lt;AxisBottom scale={xScale} label=&quot;Day&quot; labelOffset={15} numTicks={5} top={yMax} /&gt;\n&lt;/Group&gt;\n```\n\n- [x] Display time along the x-axis\n- [x] Display metrics along the y-axis\n\nNow we can add the line to the chart using `LinePath` from `@vx/shapes` and we&#x27;ll pass it `curveLinear` from `@vx/curve` to dictate its shape.\n\n```jsx line=5-6,13-20\nimport React from &quot;react&quot;\nimport { Group } from &quot;@vx/group&quot;\nimport { scaleTime, scaleLinear } from &quot;@vx/scale&quot;\nimport { AxisLeft, AxisBottom } from &quot;@vx/axis&quot;\nimport { LinePath } from &quot;@vx/shape&quot;\nimport { curveLinear } from &quot;@vx/curve&quot;\n\n...\n\n&lt;Group top={25} left={65}&gt;\n  &lt;AxisLeft scale={yScale} numTicks={4} label=&quot;Miles&quot; /&gt;\n  &lt;AxisBottom scale={xScale} label=&quot;Day&quot; labelOffset={15} numTicks={5} top={yMax} /&gt;\n  &lt;LinePath\n    data={data}\n    curve={curveLinear}\n    x={(d) =&gt; xScale(x(d))}\n    y={(d) =&gt; yScale(y(d))}\n    stroke=&quot;#222222&quot;\n    strokeWidth={1.5}\n  /&gt;\n&lt;/Group&gt;\n```\n\nIt&#x27;s looking like a nice, one-line chart now. We might want to add some dots to represent the data points. To do that we&#x27;ll map over the data items and use the `circle` element positioned using each item&#x27;s points.\n\n```jsx line=4-14\n&lt;Group top={25} left={65}&gt;\n  &lt;AxisLeft scale={yScale} numTicks={4} label=&quot;Miles&quot; /&gt;\n  &lt;AxisBottom scale={xScale} label=&quot;Day&quot; labelOffset={15} numTicks={5} top={yMax} /&gt;\n  {data.map((point, pointIndex) =&gt; (\n    &lt;circle\n      key={pointIndex}\n      r={5}\n      cx={xScale(x(point))}\n      cy={yScale(y(point))}\n      stroke=&quot;#222222&quot;\n      fill=&quot;#222222&quot;\n      fillOpacity={0.5}\n    /&gt;\n  ))}\n  &lt;LinePath\n    data={data}\n    curve={curveLinear}\n    x={(d) =&gt; xScale(x(d))}\n    y={(d) =&gt; yScale(y(d))}\n    stroke=&quot;#222222&quot;\n    strokeWidth={1.5}\n  /&gt;\n&lt;/Group&gt;\n```\n\n- [x] Show each data point on line\n\nAwesome, we fulfilled all of our requirements for this one-line chart. Here is all the code together.\n\n```jsx\nimport React from &#x27;react&#x27;;\nimport { Group } from &#x27;@vx/group&#x27;;\nimport { scaleTime, scaleLinear } from &#x27;@vx/scale&#x27;;\nimport { AxisLeft, AxisBottom } from &#x27;@vx/axis&#x27;;\nimport { LinePath } from &#x27;@vx/shape&#x27;;\nimport { curveLinear } from &#x27;@vx/curve&#x27;;\n\n// dimensions\nconst height = 500;\nconst width = 800;\n\n// accessors\nconst x = (d) =&gt; new Date(d.date).valueOf();\nconst y = (d) =&gt; d.miles;\n\nconst LineChart = ({ data = [] }) =&gt; {\n  // bounds\n  const xMax = width - 120;\n  const yMax = height - 80;\n\n  const xScale = scaleTime({\n    rangeRound: [0, xMax],\n    domain: [Math.min(...data.map(x)), Math.max(...data.map(x))],\n  });\n\n  const yScale = scaleLinear({\n    rangeRound: [0, yMax],\n    domain: [Math.max(...data.map(y)), 0],\n  });\n\n  return (\n    &lt;svg width={width} height={height}&gt;\n      &lt;Group top={25} left={65}&gt;\n        &lt;AxisLeft scale={yScale} numTicks={4} label=&quot;Miles&quot; /&gt;\n        &lt;AxisBottom scale={xScale} label=&quot;Day&quot; labelOffset={15} numTicks={5} top={yMax} /&gt;\n        {data.map((point, pointIndex) =&gt; (\n          &lt;circle\n            key={pointIndex}\n            r={5}\n            cx={xScale(x(point))}\n            cy={yScale(y(point))}\n            stroke=&quot;#222222&quot;\n            fill=&quot;#222222&quot;\n            fillOpacity={0.5}\n          /&gt;\n        ))}\n        &lt;LinePath\n          data={data}\n          curve={curveLinear}\n          x={(d) =&gt; xScale(x(d))}\n          y={(d) =&gt; yScale(y(d))}\n          stroke=&quot;#222222&quot;\n          strokeWidth={1.5}\n        /&gt;\n      &lt;/Group&gt;\n    &lt;/svg&gt;\n  );\n};\n\nexport default LineChart;\n```\n\n## Bonus\n\nFor better sizing/resizing we can use a resize observer hook in our component. I like to use the package `use-resize-observer` for this. Let&#x27;s see how we can use it in our component.\n\n```jsx line=7,18,35,61\nimport React from &#x27;react&#x27;;\nimport { Group } from &#x27;@vx/group&#x27;;\nimport { scaleTime, scaleLinear } from &#x27;@vx/scale&#x27;;\nimport { AxisLeft, AxisBottom } from &#x27;@vx/axis&#x27;;\nimport { LinePath } from &#x27;@vx/shape&#x27;;\nimport { curveLinear } from &#x27;@vx/curve&#x27;;\nimport useResizeObserver from &#x27;use-resize-observer&#x27;;\n\n// dimensions\nconst height = 500;\nconst width = 800;\n\n// accessors\nconst x = (d) =&gt; new Date(d.date).valueOf();\nconst y = (d) =&gt; d.miles;\n\nconst LineChart = ({ data = [] }) =&gt; {\n  const { ref, width = 1, height = 1 } = useResizeObserver();\n\n  // bounds\n  const xMax = width - 120;\n  const yMax = height - 80;\n\n  const xScale = scaleTime({\n    rangeRound: [0, xMax],\n    domain: [Math.min(...data.map(x)), Math.max(...data.map(x))],\n  });\n\n  const yScale = scaleLinear({\n    rangeRound: [0, yMax],\n    domain: [Math.max(...data.map(y)), 0],\n  });\n\n  return (\n    &lt;div style={{ width: &#x27;100%&#x27;, height: &#x27;100%&#x27; }} ref={ref}&gt;\n      &lt;svg width={width} height={height}&gt;\n        &lt;Group top={25} left={65}&gt;\n          &lt;AxisLeft scale={yScale} numTicks={4} label=&quot;Miles&quot; /&gt;\n          &lt;AxisBottom scale={xScale} label=&quot;Day&quot; labelOffset={15} numTicks={5} top={yMax} /&gt;\n          {data.map((point, pointIndex) =&gt; (\n            &lt;circle\n              key={pointIndex}\n              r={5}\n              cx={xScale(x(point))}\n              cy={yScale(y(point))}\n              stroke=&quot;#222222&quot;\n              fill=&quot;#222222&quot;\n              fillOpacity={0.5}\n            /&gt;\n          ))}\n          &lt;LinePath\n            data={data}\n            curve={curveLinear}\n            x={(d) =&gt; xScale(x(d))}\n            y={(d) =&gt; yScale(y(d))}\n            stroke=&quot;#222222&quot;\n            strokeWidth={1.5}\n          /&gt;\n        &lt;/Group&gt;\n      &lt;/svg&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default LineChart;\n```\n",
            "url": "https://joelmturner.com/blog/create-a-single-line-chart-in-react-with-@vx",
            "title": "Create a Single Line Chart in React with @vx",
            "summary": "This is a simple example of a single line chart built with the @vx charting primitives. We can use this to as a base to add multiple lines to our chart.",
            "date_modified": "2020-07-23T00:00:00.000Z",
            "author": {
                "name": "Joel M Turner",
                "url": "https://twitter.com/joelmturner"
            }
        },
        {
            "id": "https://joelmturner.com/blog/beginning-web-accessibility-react",
            "content_html": "<p><em>(The post <a href=\"https://joelmturner.com/blog/beginning-web-accessibility-react\">Beginning Web Accessibility in React</a> appeared first on <a href=\"https://joelmturner.com\">Joel M Turner Blog</a>.)</em></p>\nI recently decided to dive into learning accessibility on the web. So many of the great developers that I follow on Twitter advocate for accessibility and I figured it was time to see what it would take. So far, I love it.\n\nIf you&#x27;re interested in web accessibility I would suggest Gatsby, which gives a lot of win out of the gate and [@MarcySutton](https://twitter.com/marcysutton) who is an accessibility advocate and has a package, [`no-mouse-days`](https://github.com/marcysutton/no-mouse-days) that can disable the cursor on your site or app for a day. Nothing helps me see the cracks like taking away my comfort zone. Time to grow!\n\nThere are a lot of resources online to help us learn so there&#x27;s nothing new in this post. I just wanted to document what I have found and learned so far.\n\n## Linting Rules for a11y\n\nOne of the best ways to get some useful suggestions is to add the plugin, [`eslint-plugin-jsx-a11y`](https://www.npmjs.com/package/eslint-plugin-jsx-a11y) to your project. After I got it installed my editor lit up like New York City at night. Whew, I had some work to do.\n\n## WAI-ARIA\n\nWAI-ARIA is explained well from [MDN](https://developer.mozilla.org/en-US/docs/Learn/Accessibility/WAI-ARIA_basics):\n\n&gt; WAI-ARIA (Web Accessibility Initiative - Accessible Rich Internet Applications) is a specification written by the W3C, defining a set of additional HTML attributes that can be applied to elements to provide additional semantics and improve accessibility wherever it is lacking.\n\nThe three main features are Roles, Properties, and States.\n\n### Roles\n\nIt&#x27;s best to use semantic elements for desired actions. A good example is to use the `button` element for a user action. If we are using a different element to perform the role of a button we can use a role to help out. An example might be an `svg` icon with an `onClick` method.\n\n```html\n&lt;svg viewBox=&quot;0 0 128 128&quot; onClick=&quot;{myOnClickFn}&quot; role=&quot;button&quot;&gt;\n  &lt;path d=&quot;M 10 10 H 90 V 90 H 10 L 10 10&quot; /&gt;\n&lt;/svg&gt;\n```\n\nHaving a role of button tells the screen reader that the intention of this icon is to be a button.\n\nHere&#x27;s a list from [MDN of all the ARIA roles](https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Roles).\n\n### Properties\n\nProperties let us give an element extra meaning if needed. A common example is in a form input. We may have a visual indicator to show that an `input` is required. Now we can add a data attribute of `aria-required=&quot;true&quot;` to let the user know that the input needs to be valid.\n\n```html\n&lt;form onSubmit=&quot;{onSubmit}&quot;&gt;\n  &lt;label for=&quot;fieldName&quot;&gt;Name&lt;/label&gt;\n  &lt;input name=&quot;fieldName&quot; type=&quot;text&quot; /&gt;\n\n  &lt;label for=&quot;fieldEmail&quot;&gt;Email&lt;/label&gt;\n  &lt;input name=&quot;fieldEmail&quot; type=&quot;email&quot; aria-required=&quot;true&quot; /&gt;\n&lt;/form&gt;\n```\n\n### States\n\nThis is much like states in javascript. We may have a disabled input that will become enabled after validation of a previous field. We can specify the disabled state with `aria-disabled=&quot;true&quot;`.\n\n```html\n&lt;form onSubmit=&quot;{onSubmit}&quot;&gt;\n  &lt;label for=&quot;fieldName&quot;&gt;Name&lt;/label&gt;\n  &lt;input name=&quot;fieldName&quot; type=&quot;text&quot; /&gt;\n\n  &lt;label for=&quot;fieldEmail&quot;&gt;Email&lt;/label&gt;\n  &lt;input name=&quot;fieldEmail&quot; type=&quot;email&quot; aria-required=&quot;true&quot; /&gt;\n\n  &lt;label for=&quot;fieldSubscribe&quot;&gt;Subscribe&lt;/label&gt;\n  &lt;input name=&quot;fieldSubscribe&quot; type=&quot;checkbox&quot; checked=&quot;false&quot; aria-disabled=&quot;true&quot; /&gt;\n&lt;/form&gt;\n```\n\n## `tabIndex`\n\nThis is one that I vaguely knew about. It turns out that there are three types of values that it can take.\n\n- `tabindex=&quot;-1&quot;` negative one or less allows elements to get the focus programmatically instead of through sequential keyboard navigation\n- `tabindex=&quot;0&quot;` zero allows non tabbable elements to become tabbable in sequential order by adding focus to them in the document&#x27;s source order\n- `tabindex=&quot;1&quot;` one or more makes the elements tabbable in the specific index order represented by this number\n\n## `onKeypress` handler\n\nFor all the user clickable elements we can also provide an onKeyPress that handles an `Enter` or `Return` key on a clickable element. We can use a function to check for that keypress and if it&#x27;s is the key we&#x27;re looking for we can pass the event to the `onClick` function.\n\nHere&#x27;s a great snippet from [John Luke Garofalo&#x27;s post about React accessibility](https://dev.to/johnlukeg/make-react-navigation-accessible-again):\n\n```jsx\n// attach to a onKeyPress to handle Enter keyboard\n// presses in the same way as onClicks\nexport const handleEnterKeyPress = (onClick) =&gt; (event) =&gt; {\n  if (event.key === &#x27;Enter&#x27;) {\n    onClick(event);\n  }\n};\n```\n\nHere&#x27;s that snippet in TypeScript:\n\n```typescript\ntype HandleKeyPress = (\n  onClick: React.EventHandler&lt;React.MouseEvent | React.KeyboardEvent&gt;\n) =&gt; React.KeyboardEventHandler&lt;HTMLElement | SVGElement&gt;;\n\n// attach to a onKeyPress to handle Enter keyboard clicks in the same way as onClicks\nexport const handleEnterKeyPress: HandleKeyPress = (onClick) =&gt; (event) =&gt; {\n  if (event.key === &#x27;Enter&#x27;) {\n    onClick(event);\n  }\n};\n```\n\n## Conclusion\n\nHopefully this helps you dip your toes into the accessibility pond. I have a lot more to learn and implement but I feel like this was a good start. I would love to hear your resources if you have started down this road as well.\n",
            "url": "https://joelmturner.com/blog/beginning-web-accessibility-react",
            "title": "Beginning Web Accessibility in React",
            "date_modified": "2020-01-13T00:00:00.000Z",
            "author": {
                "name": "Joel M Turner",
                "url": "https://twitter.com/joelmturner"
            }
        },
        {
            "id": "https://joelmturner.com/blog/front-end-ticket-checklist",
            "content_html": "<p><em>(The post <a href=\"https://joelmturner.com/blog/front-end-ticket-checklist\">Front-End Checklist for Ticket Completion</a> appeared first on <a href=\"https://joelmturner.com\">Joel M Turner Blog</a>.)</em></p>\nOn our dev team, we are assigned tickets that may be features or bug fixes. I fumbled through the lifecycle of a ticket a few times where I missed things, forgot things, or didn&#x27;t refactor where I should. After that, I started to put together a checklist that I use for most tickets.\n\n## TL;DR: Here&#x27;s the list without description:\n\n- [ ] Clean up debugger/trace/etc\n- [ ] Clean up logs\n- [ ] Search for TODO’s in code\n- [ ] Refactor where needed\n- [ ] Write tests\n- [ ] Make sure test coverage hasn’t gone down\n- [ ] Add translate functions\n- [ ] Verify on published url\n- [ ] Verify in builder\n- [ ] Update Jira\n- [ ] Notify PMs\n- [ ] Create MR\n\n## My Current Checklist\n\nI currently have these as tasks in [Todoist](https://todoist.com/) where I can duplicate for each new ticket. Sometimes I’ll create sub-tasks on a few of these if there is more to be done on that specific issue.\n\n### Clean up debugger/trace/etc\n\nA reminder to delete any `debugger;` or `trace()` (from [MobX](https://mobx.js.org/README.html)) that are left in the code.\n\n### Clean up logs\n\nRemove any `console.log`s and `console.group`s that may still be there.\n\n### Search for TODO’s in code\n\nI like to leave myself notes as I’m working through a feature or bug. They help me remember to resolve any of the todos that are left.\n\nI usually initial my todos TODO JT so I can find them more easily. [Todo Tree](https://marketplace.visualstudio.com/items?itemName=Gruntfuggly.todo-tree) is a great VS Code extension that has been a big help for this.\n\n### Refactor where needed\n\nThere is inevitably some back and forth about how a feature or bug should be solved so they may be some prototype code that can be refactored.\n\n### Write tests\n\nI could write these tests upfront but I haven’t gotten into that habit yet. I try to make sure I catch the cases we need to cover based on newly added or deleted code.\n\n### Make sure test coverage hasn’t gone down\n\nThis reminds me to run test coverage and make sure I haven’t just dropped our coverage.\n\n### Add translate functions\n\nThis runs a scanner to add any new UI text to our language files for translation. This will eventually be part of the CI but for now, I need to remind myself.\n\n### Verify on published URL\n\nWe publish the URLs of completed visualizations. It’s important to make sure that nothing regressed on the running URL and the feature is working correctly.\n\n### Verify in our builder UI\n\nThis is our UI where customers build their visualizations. This is to make sure the fix/feature is working as expected. We also need to make sure it didn’t cause any regressions.\n\n### Update Jira\n\nMake sure the ticket get’s moved through the Jira columns. This signifies QA that it’s ready to be tested.\n\n### Notify PMs\n\nLet the project manager and product manager know that the ticket is complete and ready for their review.\n\n### Create MR\n\nReminder to create a Merge Request so I can start getting feedback from code reviews.\n\n## Checklists FTW\n\nThis checklist has helped me be more consistent with my contributions. I would love to hear how others are using checklists or workflows through individual tickets.\n",
            "url": "https://joelmturner.com/blog/front-end-ticket-checklist",
            "title": "Front-End Checklist for Ticket Completion",
            "summary": "A checklist that helps me stay organized and on task when working through various tickets from multiple projects.",
            "date_modified": "2020-01-10T00:00:00.000Z",
            "author": {
                "name": "Joel M Turner",
                "url": "https://twitter.com/joelmturner"
            }
        },
        {
            "id": "https://joelmturner.com/blog/productivity-practices-front-end-development",
            "content_html": "<p><em>(The post <a href=\"https://joelmturner.com/blog/productivity-practices-front-end-development\">Productivity Practices for Front End Development</a> appeared first on <a href=\"https://joelmturner.com\">Joel M Turner Blog</a>.)</em></p>\nA big part of me getting things done are the systems that I have in place. Today I&#x27;ll talk about a few of the systems that I&#x27;m currently using.\n\n## Window Management\n\nI&#x27;m using [Better Touch Tools (BTT)](https://www.folivora.ai/) to snap my windows to specific areas on my screens. BTT as the ability to snap a window to a quarter or half of the screen by dressing the window to the corner or edge of the screen.\n\nThis is incredibly helpful for diffing or creating a dashboard. I use the custom window size and position for a few of my windows. Since I use a 2 screen set up I usually have my code (VS Code), terminal (iTerm2), and dev tools on the larger screen.\n\n![vs code, dev tools, iterm2 on screen](https://res.cloudinary.com/joelmturner/image/upload/q_80/v1569567747/code-screen.png)\n\n## Spaces\n\nI position the rest of my apps on my laptop spaces. I&#x27;ve tried having all the apps in the same space and just using the app switcher to toggle between the apps but it felt a little too unorganized for me.\n\nI now have a screen for certain jobs. Here&#x27;s the breakdown of my current setup by space.\n\n### Screen 1 (just one space)\n\n1. Code\n   1. [VS Code](https://code.visualstudio.com/)\n   2. dev tools ([Chrome](https://developers.google.com/web/tools/chrome-devtools), [Firefox](https://developer.mozilla.org/en-US/docs/Tools))\n   3. [iTerm2](https://www.iterm2.com/)\n\n### Screen 2 (6 spaces)\n\n1. Personal design ([Figma](https://www.figma.com))\n2. Personal\n   1. Personal project dev browser\n   2. Music ([Spotify](https://www.spotify.com))\n3. Communication/Tracking\n   1. [Slack](https://slack.com/)\n   2. [Todoist](https://todoist.com/r/joelmturner_rooqqg)\n4. Git manager ([GitKraken](https://www.gitkraken.com/invite/78cNgZYg))\n5. Work project dev browsers\n6. Work design (Slack, [Abstract](https://www.abstract.com/))\n\nI love that everything has its place and I can just swipe to that space or use the app switcher for quick access. After about a week of using this setup I knew where everything was without thinking about it. That had sped up my project speed by quite a bit while reducing my mental fatigue.\n\n## [App Launching](#app-launching)\n\nAlfred is my go to for app launching and switching. It might be one of the most used apps on my computer currently.\n\n## Clipboard History\n\nThis is one of my favorite parts of Alfred. I use the history all the time. Sometimes I use it to save my text in a form so I don&#x27;t lose it on some save glitch. Being able to grab multiple pieces from a document and paste each one. It&#x27;s nice to be able to go back and grab something that I didn&#x27;t know that I would need again but it&#x27;s there in the history.\n\n## Expanding Text\n\nExpanding text through keyboard shortcuts can speed up so many redundant tasks.\n\nUntil recently I was using TextExpander 4 (just before they moved to a subscription model) and have moved all my shortcuts to Alfred. Since I was already using and loving Alfred for its other powerful features I decided to go all in with it for snippets. One of the expansions that I use the most is for `console.log()`. I can type `2log` and it will prompt me for input and fill in `console.log(&quot;prompText&quot;, prompText)`.\n\nSimple snippets are a breeze with Alfred. Form snippets are a little bit of work but still easy enough.\n\n## Task List\n\nI use Todoist for my task list. It is one of my most valuable tools in my tool belt. I love that it is seamless on all my devices and it&#x27;s set up well for [GTD](https://gettingthingsdone.com/). I usually dump/collect my ideas, todos, and projects into the inbox and sort them out later when I&#x27;m in the project management zone.\n\nOne feature I use quite a bit is the template copy. When I get assigned a new ticket I copy my ticket checklist and rename it with the ticket number. This helps me make sure that I get everything done before handing it off to QA.\n\n![todoist app screen with tasks](https://res.cloudinary.com/joelmturner/image/upload/q_80/v1569567747/todoist-ticket.png#center)\n\n## ZSH/Bash Alias\n\nI have a few helpful aliases set up for quickly switching directories, running tests, starting projects, etc. Here are a few of them:\n\n```bash\nalias nis=&quot;npm install; npm start&quot;\nalias ns=&quot;npm start&quot;\nalias nt=&quot;npm run test&quot;\nalias nsstory=&quot;npm run storybook&quot;\nalias grun=&quot;./gradlew bootrun&quot;\nalias gtest=&quot;./gradlew test&quot;\nalias jmt=&quot;cd ~/Desktop/Dev/joelmturner&quot;\n```\n\nI would love to hear about how your setup works for you. Let me know on &lt;a href=&quot;https://mobile.twitter.com/search?q=https://joelmturner.com/blog/productivity-practices-front-end-development&quot;&gt;Twitter&lt;/a&gt;.\n",
            "url": "https://joelmturner.com/blog/productivity-practices-front-end-development",
            "title": "Productivity Practices for Front End Development",
            "summary": "Tools and tips that I use daily to help me achieve my dev and personal goals and enhance my productivity.",
            "date_modified": "2019-09-30T00:00:00.000Z",
            "author": {
                "name": "Joel M Turner",
                "url": "https://twitter.com/joelmturner"
            }
        },
        {
            "id": "https://joelmturner.com/blog/data-vis-react-bar-chart-vx",
            "content_html": "<p><em>(The post <a href=\"https://joelmturner.com/blog/data-vis-react-bar-chart-vx\">Bar Chart in React with @vx</a> appeared first on <a href=\"https://joelmturner.com\">Joel M Turner Blog</a>.)</em></p>\nimport { CodeSandbox } from &#x27;mdx-embed&#x27;;\n\n&lt;Note&gt;\n\n_Update: October 2020_ - @vx is now [@visx](https://github.com/airbnb/visx) and is at 1.0. You can read about [the update from Airbnb Engineering](https://medium.com/airbnb-engineering/introducing-visx-from-airbnb-fd6155ac4658). As of this update, the api is all the same, and it has TypeScript support 👍.\n\n&lt;/Note&gt;\n\n## What We&#x27;re Building TL;DR\n\n&lt;CodeSandbox codeSandboxId=&quot;react-bar-chart-with-vx-yi48e&quot; /&gt;\n\nData visualization is steadily becoming more valuable to companies as they try to understand all the data they have coming in. There are a lot of different solutions for data visualization in javaScript, [d3](https://d3js.org/) being one of the most popular.\n\nWhen working in React it can be frustrating to handle d3 since they tend to compete for the DOM. There is a solution that we&#x27;ve been using for a little while at Sprinklr to help with this.\n\nThat solution is the library [@vx](https://vx-demo.now.sh/). It&#x27;s a set of base components in React that wrap d3, made to build a charting library from. There are some great helpers rolled up in the components that make working with `svg`&#x27;s much better. It hasn&#x27;t been released as stable quite yet but it works for our purposes.\n\nToday we&#x27;re going to focus on building a bar chart component. Here are the requirements for this component.\n\n- [ ] Can take an array of single dimension data\n- [ ] Render each item on a shared scale\n- [ ] Should have a x and y axis\n\n## Packages\n\nLet&#x27;s start by getting the packages we need from @vx. Well need shapes, scale, axis, gradient (easy background color), and some mock data to get started.\n\n```bash\n  yarn add @vx/shapes @vx/group @vx/scale @vx/axis @vx/gradient\n```\n\nOr\n\n```bash\n  npm install @vx/shapes @vx/group @vx/scale @vx/axis @vx/gradient --save\n```\n\n## Data\n\nNow that we have our packages we can start stubbing out our data. We&#x27;re going to use some mock data to get started so feel free to create your own or use this data set.\n\n```js\nconst defaultData1 = [\n  {\n    label: &#x27;Happy&#x27;,\n    value: 4000,\n  },\n  {\n    label: &#x27;Sad&#x27;,\n    value: 2000,\n  },\n  {\n    label: &#x27;Angry&#x27;,\n    value: 3000,\n  },\n  {\n    label: &#x27;Joyful&#x27;,\n    value: 4500,\n  },\n  {\n    label: &#x27;Anxious&#x27;,\n    value: 7000,\n  },\n];\n```\n\nNow that we have the shape of our data we can add some helper functions that will access those items. This will help us add the labels across the x-axis, and the values along the y-axis. We&#x27;ll see how these come into play a little later.\n\n```js\n// accessors return the label and value of that data item\nconst x = (d) =&gt; d.label;\nconst y = (d) =&gt; d.value;\n```\n\n## Scales\n\nWe can now define the max height and max width that we would like our chart to be. Our component will take height and width as props, and then we can add a little padding. This will help us as we define our scales for this chart.\n\n```js\n// bounds\nconst xMax = width - 80;\nconst yMax = height - 80;\n```\n\nThe scales are where the magic really happen. It took me a while to understand what the `domain` and `range` in d3 were all about. The general rule of thumb based on my understanding is that `domain` is the lowest and highest data points. The `range` is the pixel range we would like to plot these data points on.\n\nIn our scales below we can see that `range` (`rangeRound`) is from `0` to `xMax` which is the height bound of our chart. @vx gives us a helper, `rangeRound`, that prettifies the numbers.\n\nThe `domain` is an array of all data points which resolves to lowest (2000) and highest (7000) of the data set.\n\nThe padding is another helper from @vx that adds banding or space between and the width of the bars for us.\n\n```js\n// scales\nconst xScale = scaleBand({\n  rangeRound: [0, xMax],\n  domain: data.map(x),\n  padding: 0.4,\n});\n\nconst yScale = scaleLinear({\n  rangeRound: [0, yMax],\n  domain: [Math.max(...data.map(y)), 0],\n});\n```\n\n## Bar Chart\n\nCool, let&#x27;s build the component! We&#x27;ll start by setting up the `svg` and `Group` to hold our chart. The `Group` helps us place the axes and the bars.\n\n```jsx\nimport React from &#x27;react&#x27;;\nimport { Group } from &#x27;@vx/group&#x27;;\nimport { LinearGradient } from &#x27;@vx/gradient&#x27;;\nimport { scaleBand, scaleLinear } from &#x27;@vx/scale&#x27;;\nimport { AxisLeft, AxisBottom } from &#x27;@vx/axis&#x27;;\n\n// accessors return the label and value of that data item\nconst x = (d) =&gt; d.label;\nconst y = (d) =&gt; d.value;\n\nfunction BarChart({ data, width, height }) {\n  // bounds\n  const xMax = width - 80;\n  const yMax = height - 80;\n\n  // scales\n  const xScale = scaleBand({\n    rangeRound: [0, xMax],\n    domain: data.map(x),\n    padding: 0.4,\n  });\n\n  const yScale = scaleLinear({\n    rangeRound: [0, yMax],\n    domain: [Math.max(...data.map(y)), 0],\n  });\n\n  return (\n    &lt;svg width={width} height={height}&gt;\n      &lt;Group top={25} left={55}&gt;&lt;/Group&gt;\n    &lt;/svg&gt;\n  );\n}\n\nexport default BarChart;\n```\n\n- [x] Can take an array of single dimension data\n\nLooks good. The first thing we&#x27;ll add is the y-axis. To do this we use [`AxisLeft`](https://vx-demo.now.sh/docs/axis#AxisLeft) from @vx. We need to pass it our yScale, and we&#x27;ll give it a few other props for styling. The prop `left` pushes the axis over enough to show the `label` and the `numTicks` limits the number of values shown on the y-axis.\n\nThen we&#x27;ll add the [`AxisBottom`](https://vx-demo.now.sh/docs/axis#AxisBottom) that has similar props to `AxisLeft`. It should look like this:\n\n```jsx line=2-3\n&lt;Group top={25} left={55}&gt;\n  &lt;AxisLeft left={10} scale={yScale} numTicks={4} label=&quot;Times Expressed&quot; /&gt;\n  &lt;AxisBottom scale={xScale} label=&quot;Emotion&quot; labelOffset={15} top={yMax} /&gt;\n&lt;/Group&gt;\n```\n\n- [x] Should have a x and y axis\n\nNow we can loop over the data and return the bar. The width, height, and x are all using the scale to determine where they would be plotted in the graph.\n\n```jsx\n{\n  data.map((d, i) =&gt; {\n    const label = x(d);\n    const barWidth = xScale.bandwidth();\n    const barHeight = yMax - yScale(y(d));\n    const barX = xScale(label);\n    const barY = yMax - barHeight;\n\n    return &lt;Bar key={`bar-${label}`} x={barX} y={barY} width={barWidth} height={barHeight} /&gt;;\n  });\n}\n```\n\n- [x] Render each item on a shared scale\n\n## Finish\n\nNice! It should be good to go. We&#x27;re going to add in the `LinearGradient` for a background color as well. Here it is all together:\n\n```jsx\nimport React from &#x27;react&#x27;;\nimport { Group } from &#x27;@vx/group&#x27;;\nimport { LinearGradient } from &#x27;@vx/gradient&#x27;;\nimport { scaleBand, scaleLinear } from &#x27;@vx/scale&#x27;;\nimport { AxisLeft, AxisBottom } from &#x27;@vx/axis&#x27;;\n\n// accessors return the label and value of that data item\nconst x = (d) =&gt; d.label;\nconst y = (d) =&gt; d.value;\n\nfunction BarChart({ data, width, height }) {\n  // bounds\n  const xMax = width - 80;\n  const yMax = height - 80;\n\n  // scales\n  const xScale = scaleBand({\n    rangeRound: [0, xMax],\n    domain: data.map(x),\n    padding: 0.4,\n  });\n\n  const yScale = scaleLinear({\n    rangeRound: [0, yMax],\n    domain: [Math.max(...data.map(y)), 0],\n  });\n\n  return (\n    &lt;svg width={width} height={height}&gt;\n      &lt;LinearGradient from={`#e9e9e9`} to={`#fff`} id={`gradientFill`} /&gt;\n      &lt;rect width={width} height={height} fill={`url(#gradientFill)`} rx={5} /&gt;\n      &lt;Group top={25} left={55}&gt;\n        &lt;AxisLeft left={10} scale={yScale} numTicks={4} label=&quot;Times&quot; /&gt;\n        {data.map((d, i) =&gt; {\n          const label = x(d);\n          const barWidth = xScale.bandwidth();\n          const barHeight = yMax - yScale(y(d));\n          const barX = xScale(label);\n          const barY = yMax - barHeight;\n\n          return &lt;Bar key={`bar-${label}`} x={barX} y={barY} width={barWidth} height={barHeight} /&gt;;\n        })}\n        &lt;AxisBottom scale={xScale} label=&quot;Emotion&quot; labelOffset={15} top={yMax} /&gt;\n      &lt;/Group&gt;\n    &lt;/svg&gt;\n  );\n}\n\nexport default BarChart;\n```\n\n## Bonus\n\nAdd a little smoothness to your bars with a css transition like:\n\n```css\n.vx-bar {\n  transition: height 150ms, y 150ms;\n}\n```\n\nThis way, when the data changes it will move to the next height smoothly.\n",
            "url": "https://joelmturner.com/blog/data-vis-react-bar-chart-vx",
            "title": "Bar Chart in React with @vx",
            "summary": "Building a bar chart in React using the @vx library of charting primitives. This is one of the most widely used charts and gives a good base for building upon.",
            "date_modified": "2019-09-17T00:00:00.000Z",
            "author": {
                "name": "Joel M Turner",
                "url": "https://twitter.com/joelmturner"
            }
        },
        {
            "id": "https://joelmturner.com/blog/inline-text-edit-react-hooks",
            "content_html": "<p><em>(The post <a href=\"https://joelmturner.com/blog/inline-text-edit-react-hooks\">Build an Inline Edit Text Input With React Hooks</a> appeared first on <a href=\"https://joelmturner.com\">Joel M Turner Blog</a>.)</em></p>\nimport { CodeSandbox } from &#x27;mdx-embed&#x27;;\n\nA nice feature in many apps is to edit a title or other text inline without leaving the context that we&#x27;re in.\n\nHere&#x27;s what we&#x27;ll be building.\n\n&lt;CodeSandbox codeSandboxId=&quot;inline-text-edit-react-hooks-6ql5m&quot; /&gt;\n\nLet&#x27;s take a look at the requirements for this component.\n\n- [ ] Must show text when in rest\n- [ ] Click on text to edit the text\n- [ ] Enter key to save\n- [ ] Esc key to exit without saving\n- [ ] Click outside to save\n\nCool let&#x27;s start by creating the resting state. We&#x27;re going to do some basic styling with CSS to help us.\n\n```jsx\nimport React from &#x27;react&#x27;;\n\nfunction InlineEdit(props) {\n  return (\n    &lt;span className=&quot;inline-text_copy inline-text_copy--active&quot;&gt;\n      {props.text}\n      &lt;input className=&quot;inline-text_input inline-text_input--rest&quot; /&gt;\n    &lt;/span&gt;\n  );\n}\n\nexport default InlineEdit;\n```\n\n```css\n/* these make sure it can work in any text element */\n.inline-text_copy--active,\n.inline-text_input--active {\n  font: inherit;\n  color: inherit;\n  text-align: inherit;\n  padding: 0;\n  background: none;\n  border: none;\n  border-bottom: 1px dashed #999999;\n  outline: none;\n}\n\n.inline-text_copy--active {\n  cursor: pointer;\n}\n\n.inline-text_copy--hidden,\n.inline-text_input--hidden {\n  display: none;\n}\n\n.inline-text_input--active {\n  border-bottom: 1px solid #666666;\n  text-align: left;\n}\n```\n\n- [x] Must show text when in rest\n\nThis sets is us up with a simple text component that displays our text. Now the trickery begins!\nWe want to click on the text and have the input show up. Let&#x27;s create some state to track whether we&#x27;re at rest or active.\n\n```jsx\nimport React, {useState} from &quot;react&quot;;\n{...}\nconst [isInputActive, setIsInputActive] = useState(false);\n```\n\nCool, now we have some state to help us display/hide our text and input. We also need some state to track what is being typed in our input. Let&#x27;s add another `useState` to hold that text.\n\n```jsx\nconst [inputValue, setInputValue] = useState(&#x27;&#x27;);\n```\n\nLet&#x27;s hook this state up to our elements.\n\n```jsx\nfunction InlineEdit(props) {\n  const [isInputActive, setIsInputActive] = useState(false);\n  const [inputValue, setInputValue] = useState(&#x27;&#x27;);\n\n  return (\n    &lt;span className=&quot;inline-text&quot;&gt;\n      &lt;span className={`inline-text_copy inline-text_copy--${!isInputActive ? &#x27;active&#x27; : &#x27;rest&#x27;}`}&gt;\n        {props.text}\n      &lt;/span&gt;\n      &lt;input\n        value={inputValue}\n        onChange={(e) =&gt; setInputValue(e.target.value)}\n        className={`inline-text_input inline-text_input--${isInputActive ? &#x27;active&#x27; : &#x27;rest&#x27;}`}\n      /&gt;\n    &lt;/span&gt;\n  );\n}\n```\n\n- [x] Click on text to edit the text\n\nAlright, now we need to set up the saving and escaping of the text. We can do this with a `useEffect` and [`useKeypress` hook](https://usehooks.com/useKeypress/) that watch for a key click and take an action.\n\n```jsx line=5-6,8-21\nfunction InlineEdit(props) {\n  const [isInputActive, setIsInputActive] = useState(false);\n  const [inputValue, setInputValue] = useState(props.text);\n\n  const enter = useKeypress(&#x27;Enter&#x27;);\n  const esc = useKeypress(&#x27;Escape&#x27;);\n\n  useEffect(() =&gt; {\n    if (isInputActive) {\n      // if Enter is pressed, save the text and case the editor\n      if (enter) {\n        props.onSetText(inputValue);\n        setIsInputActive(false);\n      }\n      // if Escape is pressed, revert the text and close the editor\n      if (esc) {\n        setInputValue(props.text);\n        setIsInputActive(false);\n      }\n    }\n  }, [enter, esc]); // watch the Enter and Escape key presses\n\n\n  return ({...}\n```\n\n- [x] Enter key to save\n- [x] Esc key to exit without saving\n\nNext we&#x27;ll add a `useRef` on the wrapping span to help us tell if a click happened outside of the component. We&#x27;re going to use the [`useOnClickOutside` hook](https://usehooks.com/useOnClickOutside/) from [useHooks.com](https://usehooks.com/).\n\n```jsx line=6,13-19\nfunction InlineEdit(props) {\n  const [isInputActive, setIsInputActive] = useState(false);\n  const [inputValue, setInputValue] = useState(props.text);\n\n  // get the the wrapping span node\n  const wrapperRef = useRef(null);\n\n  const enter = useKeypress(&#x27;Enter&#x27;);\n  const esc = useKeypress(&#x27;Escape&#x27;);\n\n  // this hook takes a ref to watch and a function to run\n  // if the click happened outside\n  useOnClickOutside(wrapperRef, () =&gt; {\n    if (isInputActive) {\n      // save the value and close the editor\n      props.onSetText(inputValue);\n      setIsInputActive(false);\n    }\n  });\n\n  useEffect(() =&gt; {\n    if (isInputActive) {\n      // if Enter is pressed, save the text and case the editor\n      if (enter) {\n        props.onSetText(inputValue);\n        setIsInputActive(false);\n      }\n      // if Escape is pressed, revert the text and close the editor\n      if (esc) {\n        setInputValue(props.text);\n        setIsInputActive(false);\n      }\n    }\n  }, [enter, esc]); // watch the Enter and Escape key presses\n\n  return (\n    &lt;span className=&quot;inline-text&quot; ref={wrapperRef}&gt;\n      {...}\n```\n\n- [x] Click outside to save\n\nWe can help the user by focusing the input when they click on the text. To do this we can add a `useRef` on the input and a `useEffect` that watches to see if the input is active.\n\n```jsx\n  const inputRef = useRef(null);\n\n  // focus the cursor in the input field on edit start\n  useEffect(() =&gt; {\n    if (isInputActive) {\n      inputRef.current.focus();\n    }\n  }, [isInputActive]);\n\n  {...}\n\n  &lt;input\n    ref={inputRef}\n    value={inputValue}\n    onChange={(e) =&gt; setInputValue(e.target.value)}\n    className={`inline-text_input inline-text_input--${isInputActive ? &quot;active&quot; : &quot;rest&quot;}`} /&gt;\n```\n\nThat was a lot of little parts. Let&#x27;s put it together to see what we have. I&#x27;ve added a few helper functions as well.\n\n```jsx\nimport React, { useState, useEffect, useRef } from &#x27;react&#x27;;\nimport useKeypress from &#x27;../hooks/useKeypress&#x27;;\nimport useOnClickOutside from &#x27;../hooks/useOnClickOutside&#x27;;\n\nfunction InlineEdit(props) {\n  const [isInputActive, setIsInputActive] = useState(false);\n  const [inputValue, setInputValue] = useState(props.text);\n\n  const wrapperRef = useRef(null);\n  const textRef = useRef(null);\n  const inputRef = useRef(null);\n\n  const enter = useKeypress(&#x27;Enter&#x27;);\n  const esc = useKeypress(&#x27;Escape&#x27;);\n\n  // check to see if the user clicked outside of this component\n  useOnClickOutside(wrapperRef, () =&gt; {\n    if (isInputActive) {\n      props.onSetText(inputValue);\n      setIsInputActive(false);\n    }\n  });\n\n  const onEnter = useCallback(() =&gt; {\n    if (enter) {\n      props.onSetText(inputValue);\n      setIsInputActive(false);\n    }\n  }, [enter, inputValue, props.onSetText]);\n\n  const onEsc = useCallback(() =&gt; {\n    if (esc) {\n      setInputValue(props.text);\n      setIsInputActive(false);\n    }\n  }, [esc, props.text]);\n\n  // focus the cursor in the input field on edit start\n  useEffect(() =&gt; {\n    if (isInputActive) {\n      inputRef.current.focus();\n    }\n  }, [isInputActive]);\n\n  useEffect(() =&gt; {\n    if (isInputActive) {\n      // if Enter is pressed, save the text and close the editor\n      onEnter();\n      // if Escape is pressed, revert the text and close the editor\n      onEsc();\n    }\n  }, [onEnter, onEsc, isInputActive]); // watch the Enter and Escape key presses\n\n  const handleInputChange = useCallback(\n    (event) =&gt; {\n      // sanitize the input a little\n      setInputValue(DOMPurify.sanitize(event.target.value));\n    },\n    [setInputValue]\n  );\n\n  const handleSpanClick = useCallback(() =&gt; setIsInputActive(true), [setIsInputActive]);\n\n  return (\n    &lt;span className=&quot;inline-text&quot; ref={wrapperRef}&gt;\n      &lt;span\n        ref={textRef}\n        onClick={handleSpanClick}\n        className={`inline-text_copy inline-text_copy--${!isInputActive ? &#x27;active&#x27; : &#x27;hidden&#x27;}`}\n      &gt;\n        {props.text}\n      &lt;/span&gt;\n      &lt;input\n        ref={inputRef}\n        // set the width to the input length multiplied by the x height\n        // it&#x27;s not quite right but gets it close\n        style={{ minWidth: Math.ceil(inputValue.length) + &#x27;ch&#x27; }}\n        value={inputValue}\n        onChange={handleInputChange}\n        className={`inline-text_input inline-text_input--${isInputActive ? &#x27;active&#x27; : &#x27;hidden&#x27;}`}\n      /&gt;\n    &lt;/span&gt;\n  );\n}\n\nexport default InlineEdit;\n```\n\nIt&#x27;s worth noting that input text may need to be sanitized before being saved. I&#x27;ve had good luck with [DOMPurify](https://github.com/cure53/DOMPurify).\n\nThat&#x27;s it! Go forth and edit!\n",
            "url": "https://joelmturner.com/blog/inline-text-edit-react-hooks",
            "title": "Build an Inline Edit Text Input With React Hooks",
            "summary": "This is a simple example of how to build an inline edit text input with React Hooks.",
            "date_modified": "2019-09-16T00:00:00.000Z",
            "author": {
                "name": "Joel M Turner",
                "url": "https://twitter.com/joelmturner"
            }
        },
        {
            "id": "https://joelmturner.com/blog/react-hooks-useDims",
            "content_html": "<p><em>(The post <a href=\"https://joelmturner.com/blog/react-hooks-useDims\">React Hooks: useDims</a> appeared first on <a href=\"https://joelmturner.com\">Joel M Turner Blog</a>.)</em></p>\nHere&#x27;s another helpful React hook. This one returns the dimensions of an element that&#x27;s passed to it.\n\n```js\nimport { useState, useLayoutEffect } from &#x27;react&#x27;;\n\nfunction useDims(ref, isSvg = false) {\n  const [dim, setDim] = useState({\n    height: 0,\n    width: 0,\n    top: 0,\n    left: 0,\n  });\n\n  useLayoutEffect(() =&gt; {\n    if (ref &amp;&amp; ref.current) {\n      if (isSvg) {\n        const { height, width, x, y } = ref.current.getBBox();\n        setDim({\n          height,\n          width,\n          top: y,\n          left: x,\n        });\n      } else {\n        setDim({\n          height: ref.current.offsetHeight,\n          width: ref.current.offsetWidth,\n          top: ref.current.offsetTop,\n          left: ref.current.offsetLeft,\n        });\n      }\n    }\n  }, [ref, isSvg]);\n\n  return dim;\n}\n\nexport default useDims;\n```\n\nIt can be used in a component like this.\n\n```jsx line=5\nimport React from &#x27;react&#x27;;\n\nfunction Chart() {\n  const chartRef = React.useRef(null);\n  const { width, height, top, left } = useDims(chartRef);\n\n  return (\n    &lt;div ref={chartRef}&gt;\n      &lt;ul&gt;\n        &lt;li&gt;width: {width}&lt;/li&gt;\n        &lt;li&gt;height: {height}&lt;/li&gt;\n        &lt;li&gt;top: {top}&lt;/li&gt;\n        &lt;li&gt;left: {left}&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n```\n\nLet&#x27;s break it down a bit. We start by receiving a ref and an optional boolean of `isSvg`. Since svgs use a different function to calculate size we can use this flag to differentiate.\n\nOur hook is using a default dimension object in state with all values set to zero. We then return that `dim` if there aren&#x27;t any changes.\n\n```js line=2-7\nfunction useDims(ref, isSvg = false) {\n  const [dim, setDim] = useState({\n      height: 0,\n      width: 0,\n      top: 0,\n      left: 0\n    });\n\n    {...}\n\n    return dim;\n```\n\nNext, we have `useEffect` which does the heavy lifting. We&#x27;re checking to see if we have a value in the ref and we are having useEffect watch the `ref` and `isSvg`.\n\n```js\nuseLayoutEffect(() =&gt; {\n  if (ref &amp;&amp; ref.current) {\n   {...}\n  }\n}, [ref, isSvg]);\n```\n\nThen, we have the calcs for the html and svg element. For the html element we can pull the offsets right off of the node. The svg, however, need to pass through `getBBox()` to get their dimensions.\n\n```js\nif (isSvg) {\n  const { height, width, x, y } = ref.current.getBBox();\n  setDim({\n    height,\n    width,\n    top: y,\n    left: x,\n  });\n} else {\n  setDim({\n    height: ref.current.offsetHeight,\n    width: ref.current.offsetWidth,\n    top: ref.current.offsetTop,\n    left: ref.current.offsetLeft,\n  });\n}\n```\n\nOnce it&#x27;s all together we have a quick way to grab the dimensions from elements. You can also use it for multiple elements in the same component.\n",
            "url": "https://joelmturner.com/blog/react-hooks-useDims",
            "title": "React Hooks: useDims",
            "summary": "Here's another helpful React hook. This one returns the dimensions of an element that's passed to it.",
            "date_modified": "2019-09-13T00:00:00.000Z",
            "author": {
                "name": "Joel M Turner",
                "url": "https://twitter.com/joelmturner"
            }
        },
        {
            "id": "https://joelmturner.com/blog/react-layout-components",
            "content_html": "<p><em>(The post <a href=\"https://joelmturner.com/blog/react-layout-components\">My Favorite Layout Components in React</a> appeared first on <a href=\"https://joelmturner.com\">Joel M Turner Blog</a>.)</em></p>\nimport { CodeSandbox } from &#x27;mdx-embed&#x27;;\n\nThere are a few components that I use almost every day in development. They are used for layouts and are made from flexbox and css grid. On this site I pass both of these down with the MdxProvider so all my pages and posts have access to them easily.\n\n## What We&#x27;re Using TL;DR\n\n&lt;CodeSandbox codeSandboxId=&quot;react-layout-components-flexbox-grid-d9e1u&quot; /&gt;\n\nI had used a column component that accepted different span amounts, but I ended up not using it as much. I tend to add `span` to the children through the `sx` prop or extending with styled components.\n\n## Flexbox\n\nThis one is by far my favorite. 90% of the time it works perfectly with the props given. It can easily be extended through styled components, emotion&#x27;s `css` prop, or Theme UI&#x27;s `sx` prop for those few cases where I need something extra.\n\nThis is definitely an opinionated way to build a Flexbox component. The idea is to have booleans for certain aspects of the spec to help speed up composition.\n\nHere&#x27;s a list of the current props for it:\n\n```typescript\ntype FlexboxProps = {\n  className?: string;\n  children?: React.ReactNode;\n\n  inline?: boolean;\n  vertical?: boolean; // column\n  wrap?: boolean;\n  noGrow?: boolean; // acts as no-grow and no-shrink\n  grow?: number;\n  shrink?: number;\n  basis?: number | &#x27;auto&#x27;;\n\n  top?: boolean;\n  middle?: boolean;\n  bottom?: boolean;\n  left?: boolean;\n  center?: boolean;\n  right?: boolean;\n  between?: boolean;\n  around?: boolean;\n  gap?: boolean | number; // add margin between children similar to grid-gap on grid\n};\n```\n\nHere is some example usage. See the [CodeSandbox](#example) down below for more.\n\n```jsx\n&lt;Flexbox vertical gap={3}&gt;\n  &lt;Flexbox noGrow&gt;\n    &lt;h1&gt;A Title for You&lt;/h1&gt;\n  &lt;/Flexbox&gt;\n  &lt;Flexbox bottom&gt;\n    &lt;p&gt;\n      This is some copy to show how the box will fill the whole area but the text will be aligned\n      bottom.\n    &lt;/p&gt;\n  &lt;/Flexbox&gt;\n&lt;/Flexbox&gt;\n```\n\n## Grid\n\nGrid is another one of my favorites and it&#x27;s also very opinionated to suit my needs. The idea is to use CSS grid to create layouts. Depending on the project it can align with a design grid.\n\nThis can be paired with Flexbox for some powerful layouts. Add the `sx` prop from Theme UI for some wonderful [breakpoint awesomeness](https://theme-ui.com/theme-spec#breakpoints).\n\nLet&#x27;s take a look at the props.\n\n```typescript\ntype GridProps = {\n  className?: string;\n  children: React.ReactNode;\n  gap?: string | number; // grid-gap\n  columns?: string | string[]; // grid-template-columns\n  rows?: string | string[]; // grid-template-rows\n};\n```\n\nHere&#x27;s an example of using it. See more examples in the [CodeSandbox](#example).\n\n```jsx\n&lt;Grid columns=&quot;1fr 1fr&quot; gap=&quot;2&quot;&gt;\n  &lt;img src=&quot;myImage.png&quot; /&gt;\n  &lt;img src=&quot;catsSinging.png&quot; /&gt;\n&lt;/Grid&gt;\n```\n",
            "url": "https://joelmturner.com/blog/react-layout-components",
            "title": "My Favorite Layout Components in React",
            "summary": "React components for rapid layout and ease of use. These components are designed to be used as building blocks for your own layouts. They are not meant to be used as the only way to build a layout.",
            "date_modified": "2019-09-12T00:00:00.000Z",
            "author": {
                "name": "Joel M Turner",
                "url": "https://twitter.com/joelmturner"
            }
        },
        {
            "id": "https://joelmturner.com/blog/react-hooks-useslider",
            "content_html": "<p><em>(The post <a href=\"https://joelmturner.com/blog/react-hooks-useslider\">React Hooks: useSlider</a> appeared first on <a href=\"https://joelmturner.com\">Joel M Turner Blog</a>.)</em></p>\nimport { CodeSandbox } from &#x27;mdx-embed&#x27;;\n\nWe had a need for an auto advancing image slider in React. I chose to use hooks for this feature. This hook leverages a `useInterval` hook from [Dan Abrimov](https://overreacted.io/making-setinterval-declarative-with-react-hooks/).\n\n## What We&#x27;re Building TL;DR\n\n&lt;CodeSandbox codeSandboxId=&quot;simple-react-hooks-interval-slider-vsmi1&quot; /&gt;\n\n## Requirements\n\nThis component needs do a few things.\n\n- [ ] Should accept an slide array\n- [ ] Should accept a duration in milliseconds\n- [ ] Should animate between slides\n- [ ] Should move through array on it&#x27;s own\n\n## useInterval\n\nHere&#x27;s the `useInterval` code.\n\n```jsx\nimport React, { useState, useEffect, useRef } from &#x27;react&#x27;;\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() =&gt; {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() =&gt; {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () =&gt; clearInterval(id);\n    }\n  }, [delay]);\n}\n```\n\nSetting an interval can be problematic in JavaScript, mostly because of cleanup (or lack of). With `useEffect` we get a nice cleanup with the return function, `return () =&gt; clearInterval(id);`.\n\n## useSlider\n\nNow that we have that set up we can leverage it to help us with timing.\n\n```jsx\nimport * as React from &#x27;react&#x27;;\nimport useInterval from &#x27;./UseInterval&#x27;;\n\nfunction useSlider({\n  total = 0, // the length of the slide array\n  enabled = false, // pauses/disables the player\n  useLoaded = false, // this allows for delayed loads like images or embeds\n  speed = 1000, // speed in milliseconds to show each slide\n  loop = true, // should it start back at the beginning\n}) {\n  const [offset, setOffset] = React.useState(0);\n  const [items, setItems] = React.useState([]);\n\n  function incrementOffset() {\n    if (offset === total - 1) {\n      setOffset(loop ? 0 : offset);\n    } else {\n      setOffset(offset + 1);\n    }\n  }\n\n  function addItem(ref) {\n    setItems([...items, ref]);\n  }\n\n  const loaded = useLoaded ? items.length === total : true;\n\n  useInterval(() =&gt; {\n    if (loaded &amp;&amp; enabled &amp;&amp; offset &lt; total) {\n      incrementOffset();\n    }\n  }, speed);\n\n  return {\n    offset, // this is the current index of the slider\n    addItem, // this takes a ref and adds it to the items array to see if all have loaded\n  };\n}\n\nexport default useSlider;\n```\n\n## Slider Component\n\nOur slider component adds all slides next to each other and moves the `.scroller` (absolutely positioned) through the `.container` (relatively positioned). This allows us to animate between the slides. Here’s the stateless structure of our component.\n\n```css\n.container {\n  background-color: #ccc;\n  margin: 0 auto;\n  position: relative;\n  overflow: hidden;\n}\n\n.scroller {\n  position: absolute;\n  transition: transform 350ms;\n  height: 100%;\n  display: flex;\n}\n\n.slide {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  transition: opacity 350ms;\n}\n```\n\n```jsx\nimport React from &#x27;react&#x27;;\nimport useSlider from &#x27;./useSlider&#x27;;\n\nconst slides = [\n  {\n    title: &#x27;Slide 1&#x27;,\n    color: &#x27;#56777A&#x27;,\n  },\n  {\n    title: &#x27;Slide 2&#x27;,\n    color: &#x27;#84ACAC&#x27;,\n  },\n  {\n    title: &#x27;Slide 3&#x27;,\n    color: &#x27;#FBA434&#x27;,\n  },\n];\n\nfunction Slider() {\n  const slideWidth = 300;\n\n  return (\n    &lt;div\n      className=&quot;container&quot;\n      style={{\n        backgroundColor: slide.color,\n        width: slideWidth,\n        height: slideWidth,\n      }}\n    &gt;\n      &lt;div\n        className=&quot;scroller&quot;\n        style={{\n          // our counter offset will go here\n          transform: `translate3d(-${offset * slideWidth}px,0,0)`,\n          width: `${slides.length * slideWidth}px`,\n        }}\n      &gt;\n        {slides.map((slide, index) =&gt; (\n          &lt;div\n            key={slide.title}\n            className=&quot;slide&quot;\n            style={{\n              backgroundColor: slide.color,\n              width: slideWidth,\n              height: slideWidth,\n            }}\n          &gt;\n            {slide.title}\n          &lt;/div&gt;\n        ))}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n```\n\n## Putting it All Together\n\nNow we can add our hook to our slider component. This will give us all the state that we’ll need for this feature. When it&#x27;s all together we get a slider that moves the slides horizontally and rewinds after the last one. You can hook up the slider props to manage the slider options if needed. It can also be made to go vertical with a little modification.\n\n### Cool! Requirements met.\n\n- [x] Should accept an slide array\n- [x] Should accept a duration in milliseconds\n- [x] Should animate between slides\n- [x] Should move through array on it&#x27;s own\n",
            "url": "https://joelmturner.com/blog/react-hooks-useslider",
            "title": "React Hooks: useSlider",
            "summary": "An auto-advancing image slider built in React with hooks.",
            "date_modified": "2019-09-11T00:00:00.000Z",
            "author": {
                "name": "Joel M Turner",
                "url": "https://twitter.com/joelmturner"
            }
        },
        {
            "id": "https://joelmturner.com/blog/build-gallery-react-css-grid",
            "content_html": "<p><em>(The post <a href=\"https://joelmturner.com/blog/build-gallery-react-css-grid\">Build a React Gallery With CSS Grid</a> appeared first on <a href=\"https://joelmturner.com\">Joel M Turner Blog</a>.)</em></p>\nCSS Grid is super powerful and can be used to create some creative layouts which makes it a great way to create galleries. In this guide we’re going to use a simple grid that keeps the images the same size.\n\n&gt; This will be a quick view of CSS Grid. If you would like to know more I highly recommend the [CSS Grid Course](https://cssgrid.io/) (free) from [Wes Bos](https://twitter.com/wesbos).\n\nHere are the requirements for this component:\n\n- Accepts an array of images (using Gatsby Image)\n- Needs to respond to different size screens (using `minmax`)\n- Takes a size prop of `s`, `m`, or `l`\n\nCool, let’s start building it out. We&#x27;re building this one based on a query for [Gatsby Image](https://www.gatsbyjs.org/packages/gatsby-image/). You can set this up for any image component or element that you may be using.\n\n```jsx\nimport React from &#x27;react&#x27;;\nimport Img from &#x27;gatsby-image&#x27;;\n\nfunction Gallery({images = []}) {\n  const wrapperStyles = {\n    display: &#x27;grid&#x27;,\n    gridTemplateColumns: &#x27;repeat(auto-fill, minmax(300px, 1fr))&#x27;,\n    gridGap: &#x27;1rem&#x27;;\n  }\n  return (\n    &lt;div style={wrapperStyles}&gt;\n      {nodes.length &gt; 0 &amp;&amp; nodes.map(node =&gt; &lt;Img fluid={node.localImage.childImageSharp.fluid} /&gt;)}\n    &lt;/div&gt;\n  )\n}\n```\n\nThe wrapper styles will give the children their sizes based on the grid and row declarations. In this case we have `gridTemplateColumns: ‘repeat(auto-fill, minmax(300px, 1fr))’` Which tells the images to lay out in as many columns that will fit based on a minimum width of `300px` and a maximum of `1fr`. The `gridGap` tells them to have a gap of `1rem` between images.\n\nWe&#x27;ll add a function that can handle the different sizing from the `size` prop and pass these into the wrapper styles.\n\n```jsx line=4,6-25,29\nimport React from &#x27;react&#x27;;\nimport Img from &#x27;gatsby-image&#x27;;\n\nfunction Gallery({ nodes = [], size = &#x27;m&#x27; }) {\n  function getStylesForSize() {\n    switch (size) {\n      case &#x27;s&#x27;:\n        return {\n          gridTemplateColumns: &#x27;repeat(auto-fill, minmax(142px, 1fr))&#x27;,\n          gridGap: &#x27;0.25rem&#x27;,\n        };\n      case &#x27;m&#x27;:\n      default:\n        return {\n          gridTemplateColumns: &#x27;repeat(auto-fill, minmax(300px, 1fr))&#x27;,\n          gridGap: &#x27;0.5rem&#x27;,\n        };\n      case &#x27;l&#x27;:\n        return {\n          gridTemplateColumns: &#x27;1fr&#x27;,\n          gridGap: &#x27;.75rem&#x27;,\n        };\n    }\n  }\n\n  const wrapperStyles = {\n    display: &#x27;grid&#x27;,\n    ...getStylesForSize(),\n  };\n\n  return (\n    &lt;div style={wrapperStyles}&gt;\n      {nodes.length &gt; 0 &amp;&amp;\n        nodes.map((node) =&gt; &lt;Img fluid={node.localImage.childImageSharp.fluid} /&gt;)}\n    &lt;/div&gt;\n  );\n}\n```\n\nWe can now pass our size changes to the gallery component. Cool!\n\n## TypeScript\n\nNow, let&#x27;s type it. This will help us and others know what we shape we need passed to the gallery.\n\n```typescript line=2,4-19,21,23,44\nimport React from &#x27;react&#x27;;\nimport Img, { FluidObject } from &#x27;gatsby-image&#x27;;\n\ntype GallerySizes = &#x27;s&#x27; | &#x27;m&#x27; | &#x27;l&#x27;;\ntype GalleryImage = {\n  node: {\n    localImage: {\n      childImageSharp: {\n        fluid: FluidObject;\n      };\n    };\n    id: string;\n  };\n};\n\ntype GalleryProps = {\n  imageNodes: GalleryImage[];\n  size?: GallerySizes;\n};\n\nfunction Gallery({ images, size = &#x27;m&#x27; }: GalleryProps) {\n  function getStylesForSize(): React.CSSProperties {\n    switch (size) {\n      case &#x27;s&#x27;:\n        return {\n          gridTemplateColumns: &#x27;repeat(auto-fill, minmax(142px, 1fr))&#x27;,\n          gridGap: &#x27;0.25rem&#x27;,\n        };\n      case &#x27;m&#x27;:\n      default:\n        return {\n          gridTemplateColumns: &#x27;repeat(auto-fill, minmax(300px, 1fr))&#x27;,\n          gridGap: &#x27;0.5rem&#x27;,\n        };\n      case &#x27;l&#x27;:\n        return {\n          gridTemplateColumns: &#x27;1fr&#x27;,\n          gridGap: &#x27;.75rem&#x27;,\n        };\n    }\n  }\n\n  const wrapperStyles: React.CSSProperties = {\n    display: &#x27;grid&#x27;,\n    ...getStylesForSize(),\n  };\n\n  return (\n    &lt;div style={wrapperStyles}&gt;\n      {nodes.length &gt; 0 &amp;&amp;\n        nodes.map((node) =&gt; &lt;Img fluid={node.localImage.childImageSharp.fluid} /&gt;)}\n    &lt;/div&gt;\n  );\n}\n```\n\nNice! Now we have a functioning gallery component that can change sizes. You can see my implementation of this on the &lt;Link to=&#x27;/illustration&#x27;&gt;illustration page&lt;/Link&gt;.\n",
            "url": "https://joelmturner.com/blog/build-gallery-react-css-grid",
            "title": "Build a React Gallery With CSS Grid",
            "summary": "CSS Grid is super powerful and can be used to create some creative layouts which makes it a great way to create galleries. In this guide we’re going to use a simple grid that keeps the images the same size.",
            "date_modified": "2019-09-10T00:00:00.000Z",
            "author": {
                "name": "Joel M Turner",
                "url": "https://twitter.com/joelmturner"
            }
        },
        {
            "id": "https://joelmturner.com/blog/quick-tip-graphql-fragments",
            "content_html": "<p><em>(The post <a href=\"https://joelmturner.com/blog/quick-tip-graphql-fragments\">Quick Tip: GraphQL Fragments in Gatsby</a> appeared first on <a href=\"https://joelmturner.com\">Joel M Turner Blog</a>.)</em></p>\nGraphQL makes it easy to get exactly the data we need for a given component. There are many times when we end up using the same query or part of a query in multiple places. This is where [GraphQL Fragments](https://graphql.org/learn/queries/#fragments) can help us.\n\nTo declare a fragment we can add `fragment MyAwesomeFragment on BlogPost`. The keyword `fragment` tells GraphQL that we&#x27;re creating the fragment with the name, `MyAwesomeFragment`. And all of this is on the type `BlogPost`.\n\nIn this site I have a few different places where I&#x27;m querying images for galleries. So instead of repeating the whole query in every variation across the site I can create a queries file and drop the repeated parts in there. Here&#x27;s an example of that in action.\n\n```\nfragment InstaNodes on InstagramContentEdge {\n  node {\n    id\n    localImage {\n      childImageSharp {\n        fluid(maxWidth: 1248, maxHeight: 1248) {\n          ...GatsbyImageSharpFluid_withWebp\n        }\n      }\n    }\n    images {\n      standard_resolution {\n        width\n        height\n        url\n      }\n    }\n  }\n}\n```\n\nThen we can use them in our components with a page query or static query.\n\n```jsx line=7\nconst data = useStaticQuery(graphql`\n  query {\n    allInstagramContent(\n      filter: { tags: { glob: &quot;ink*2017&quot; } }\n      sort: { fields: created_time, order: ASC }\n    ) {\n      edges {\n        ...InstaNodes\n      }\n    }\n  }\n`);\n```\n\n## Typing\n\nIf you&#x27;re using TypeScript you can also drop the types for the fragments in the queries file so they&#x27;re all together.\n\n```typescript\ntype IInstaNodes = {\n  node: {\n    id: string;\n    localImage: {\n      childImageSharp: {\n        fluid: FluidObject;\n      };\n    };\n    images: {\n      standard_resolution: {\n        width: number;\n        height: number;\n        url: string;\n      };\n    };\n  };\n};\n```\n\n## Bonus\n\nAdd an alias if you&#x27;re doing similar top level requests. Here&#x27;s an example of my Instagram requests.\n\n```\nfragment inktober2017 on Query {\n  inktober2017: allInstagramContent(\n    filter: { tags: { glob: &quot;ink*2017&quot; } }\n    sort: { fields: created_time, order: ASC }\n  ) {\n    edges {\n      ...InstaNodes\n    }\n  }\n}\nfragment inktober2018 on Query {\n  inktober2018: allInstagramContent(\n    filter: { tags: { glob: &quot;ink*2018&quot; } }\n    sort: { fields: created_time, order: ASC }\n  ) {\n    edges {\n      ...InstaNodes\n    }\n  }\n}\nfragment letterClash on Query {\n  letterClash: allInstagramContent(\n    filter: { tags: { eq: &quot;letterclash&quot; } }\n    sort: { fields: created_time, order: ASC }\n  ) {\n    edges {\n      ...InstaNodes\n    }\n  }\n}\n```\n\nNow we can grab that data like this:\n\n```js\nconst {\n  inktober2017: { edges: ink2017Edges = [] } = {},\n  inktober2018: { edges: ink2018Edges = [] } = {},\n  letterClash: { edges: letterClashEdges = [] } = {},\n} = data;\n```\n",
            "url": "https://joelmturner.com/blog/quick-tip-graphql-fragments",
            "title": "Quick Tip: GraphQL Fragments in Gatsby",
            "summary": "A few quick tips about working with GraphQL fragments in Gatsby.",
            "date_modified": "2019-09-09T00:00:00.000Z",
            "author": {
                "name": "Joel M Turner",
                "url": "https://twitter.com/joelmturner"
            }
        },
        {
            "id": "https://joelmturner.com/blog/avatar-component-gatsby-3",
            "content_html": "<p><em>(The post <a href=\"https://joelmturner.com/blog/avatar-component-gatsby-3\">Create an Avatar Component in Gatsby with TypeScript Part 3: Adding Types</a> appeared first on <a href=\"https://joelmturner.com\">Joel M Turner Blog</a>.)</em></p>\nWe left off with our avatar component working using Gatsby Image and still able to receive an image url. Now, let&#x27;s look at what it would take to type this component. I like to use `type` instead of `interface` for the props. You can read more about [the difference between type and interface](https://medium.com/@martin_hotell/interface-vs-type-alias-in-typescript-2-7-2a8f1777af4c) if you&#x27;d like.\n\nThe props type will look something like this:\n\n```typescript\ntype AvatarProps = {\n  url?: string;\n  altText?: string;\n  title?: string;\n  user?: &#x27;monster1&#x27; | &#x27;monster2&#x27;;\n};\n\nfunction Avatar(props: AvatarProps) {}\n```\n\nThe cool part here is that the `user` prop can be typed to match the graphql alias names. This helps anyone consuming this component know the values they can pass.\n\nLet&#x27;s take a look at typing our data variable. We know the shape of what we expect because of our graphql. We just need to provide the correct typing at the childImageSharp level. Luckily Gatsby Image has a type of `FixedObject` that can help us out here. We pass the type to the static query hook like `useStaticQuery&lt;Data&gt;(graphql` to signify that we expect the return to be `Data`.\n\n```typescript\n{...}\nimport Img, { FixedObject } from &quot;gatsby-image&quot;\n{...}\n\ntype Data = {\n  monster1: {\n    childImageSharp: {\n      fixed: FixedObject;\n    };\n  };\n  monster2: {\n    childImageSharp: {\n      fixed: FixedObject;\n    };\n  };\n}\n\nfunction Avatar(props: AvatarProps) {\n  const data = useStaticQuery&lt;Data&gt;(graphql``)\n    {...}\n}\n```\n\nLet&#x27;s refactor the redundancy in the `Data` type.\n\n```typescript\ntype ChildImage = {\n  childImageSharp: {\n    fixed: FixedObject;\n  };\n};\n\ntype Data = {\n  monster1: ChildImage;\n  monster2: ChildImage;\n};\n```\n\nCool, now we should have something like this:\n\n```typescript\nimport React from &#x27;react&#x27;;\nimport { useStaticQuery, graphql } from &#x27;gatsby&#x27;;\nimport Img, { FixedObject } from &#x27;gatsby-image&#x27;;\n\ntype AvatarProps = {\n  url?: string;\n  altText?: string;\n  title?: string;\n  user?: &#x27;monster1&#x27; | &#x27;monster2&#x27;;\n};\n\ntype ChildImage = {\n  childImageSharp: {\n    fixed: FixedObject;\n  };\n};\n\ntype Data = {\n  monster1: ChildImage;\n  monster2: ChildImage;\n};\n\nfunction Avatar(props: AvatarProps) {\n  const data = useStaticQuery&lt;Data&gt;(graphql`\n    query {\n      monster1: file(relativePath: { eq: &quot;monster-01-headshot.png&quot; }) {\n        childImageSharp {\n          fixed(width: 75, height: 75) {\n            ...GatsbyImageSharpFixed_withWebp\n          }\n        }\n      }\n      monster2: file(relativePath: { eq: &quot;monster-02-headshot.png&quot; }) {\n        childImageSharp {\n          fixed(width: 75, height: 75) {\n            ...GatsbyImageSharpFixed_withWebp\n          }\n        }\n      }\n    }\n  `);\n\n  const { url, altText, title, user } = props;\n  const styles = {\n    width: &#x27;75px&#x27;,\n    height: &#x27;75px&#x27;,\n    borderRadius: &#x27;50%&#x27;,\n  };\n\n  if (url) {\n    return &lt;img style={styles} src={url} alt={altText} title={title} /&gt;;\n  }\n\n  return (\n    &lt;Img\n      style={styles}\n      fixed={user &amp;&amp; data[user].childImageSharp.fixed}\n      alt={altText}\n      title={title}\n    /&gt;\n  );\n}\n\nexport default Avatar;\n```\n\nThanks for following along!\n",
            "url": "https://joelmturner.com/blog/avatar-component-gatsby-3",
            "title": "Create an Avatar Component in Gatsby with TypeScript Part 3: Adding Types",
            "date_modified": "2019-09-08T00:00:00.000Z",
            "author": {
                "name": "Joel M Turner",
                "url": "https://twitter.com/joelmturner"
            }
        },
        {
            "id": "https://joelmturner.com/blog/avatar-component-gatsby-2",
            "content_html": "<p><em>(The post <a href=\"https://joelmturner.com/blog/avatar-component-gatsby-2\">Create an Avatar Component in Gatsby with TypeScript Part 2: Gatsby Image</a> appeared first on <a href=\"https://joelmturner.com\">Joel M Turner Blog</a>.)</em></p>\nIn &lt;Link to=&#x27;/blog/avatar-component-gatsby-1&#x27;&gt;Part 1&lt;/Link&gt; we put together a simple avatar component that can receive an image url and render it out as a round image.\n\nTo get the full benefit of Gatsby Image we need to make sure our image is pulled into our graphql. We&#x27;ll need to install a couple of plugins to help us here. [`gatsby-image`](https://www.gatsbyjs.org/packages/gatsby-image), [`gatsby-transformer-sharp`](https://www.gatsbyjs.org/packages/gatsby-transformer-sharp), [`gatsby-plugin-sharp`](https://www.gatsbyjs.org/packages/gatsby-plugin-sharp) will be needed.\n\nLet&#x27;s install `gatsby-image`\n\n```bash\nnpm install --save gatsby-image\n```\n\nThen, if you don&#x27;t already have `gatsby-transformer-sharp` and `gatsby-plugin-sharp` we can install them.\n\n```bash\nnpm install --save gatsby-transformer-sharp gatsby-plugin-sharp\n```\n\nThen in your gatsby-config.js:\n\n```js title=&#x27;happy&#x27;\nplugins: [`gatsby-transformer-sharp`, `gatsby-plugin-sharp`];\n```\n\nWe&#x27;ll need a source plugin set up as well. For this example we&#x27;re going to use `gatsby-source-filesystem`. Here what our `gatsby-config` might look like, assuming our images are in `src/assets`.\n\n```js\nconst path = require(`path`);\n\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `assets`,\n        path: path.join(__dirname, `src`, `assets`),\n      },\n    },\n    `gatsby-plugin-sharp`,\n    `gatsby-transformer-sharp`,\n  ],\n};\n```\n\nNow let&#x27;s drop our image file into our assets folder and create a query for it. We can use the hook for StaticQuery in our component which will make the image available through the data prop. Since we know the size of the image we can add those dimensions in our graphql query so the so the browser doesn&#x27;t have to do all the work.\n\n```jsx\nconst data = useStaticQuery(graphql`\n  query {\n    placeholderImage: file(relativePath: { eq: &quot;monster-01-headshot.png&quot; }) {\n      childImageSharp {\n        fixed(width: 75, height: 75) {\n          ...GatsbyImageSharpFixed_withWebp\n        }\n      }\n    }\n  }\n`);\n```\n\nThen we need to add the `Img` component from `gatsby-image` so that it can do its magic.\n\n```jsx\nimport Img from &quot;gatsby-image&quot;\n\nfunction Avatar(props) {\n  {...}\n  return (\n    &lt;Img\n      style={styles}\n      fixed={data.placeholderImage.childImageSharp.fixed}\n      alt={altText}\n      title={title} /&gt;\n  )\n}\n```\n\nNow let&#x27;s put it all together.\n\n```jsx\nimport React from &#x27;react&#x27;;\nimport { useStaticQuery, graphql } from &#x27;gatsby&#x27;;\nimport Img from &#x27;gatsby-image&#x27;;\n\nfunction Avatar(props) {\n  const data = useStaticQuery(graphql`\n    query {\n      placeholderImage: file(relativePath: { eq: &quot;monster-01-headshot.png&quot; }) {\n        childImageSharp {\n          fixed(width: 75, height: 75) {\n            ...GatsbyImageSharpFixed_withWebp\n          }\n        }\n      }\n    }\n  `);\n\n  const { url, altText, title } = props;\n  const styles = {\n    width: &#x27;75px&#x27;,\n    height: &#x27;75px&#x27;,\n    borderRadius: &#x27;50%&#x27;,\n  };\n\n  return (\n    &lt;Img\n      style={styles}\n      fixed={data.placeholderImage.childImageSharp.fixed}\n      alt={altText}\n      title={title}\n    /&gt;\n  );\n}\n\nexport default Avatar;\n```\n\nWe&#x27;re still missing the ability to pass a url to our avatar component so let&#x27;s add that back in. We can return a regular `img` element if we get a url. Using `fixed` will be better since we&#x27;re not worried about fluid mode with this component.\n\n```jsx\nimport React from &#x27;react&#x27;;\nimport { useStaticQuery, graphql } from &#x27;gatsby&#x27;;\nimport Img from &#x27;gatsby-image&#x27;;\n\nfunction Avatar(props) {\n  const data = useStaticQuery(graphql`\n    query {\n      placeholderImage: file(relativePath: { eq: &quot;monster-01-headshot.png&quot; }) {\n        childImageSharp {\n          fixed(width: 75, height: 75) {\n            ...GatsbyImageSharpFixed_withWebp\n          }\n        }\n      }\n    }\n  `);\n\n  const { url, altText, title } = props;\n  const styles = {\n    width: &#x27;75px&#x27;,\n    height: &#x27;75px&#x27;,\n    borderRadius: &#x27;50%&#x27;,\n  };\n\n  if (url) {\n    return &lt;img style={styles} src={url} alt={altText} title={title} /&gt;;\n  }\n\n  return (\n    &lt;Img\n      style={styles}\n      fixed={data.placeholderImage.childImageSharp.fixed}\n      alt={altText}\n      title={title}\n    /&gt;\n  );\n}\n\nexport default Avatar;\n```\n\nThis allows us to call avatar without us needing to pass a prop of image url. If you need multiple avatar images for your team you can add them to the quite and pass a user prop down and we&#x27;ll grab that from the query. We can name the queries to match the users like so:\n\n```jsx\nfunction Avatar(props) {\n  const data = useStaticQuery(graphql`\n      query {\n        monster1: file(relativePath: { eq: &quot;monster-01-headshot.png&quot; }) {\n          childImageSharp {\n            fixed(width: 75, height: 75) {\n              ...GatsbyImageSharpFixed_withWebp\n            }\n          }\n        }\n        monster2: file(relativePath: { eq: &quot;monster-02-headshot.png&quot; }) {\n          childImageSharp {\n            fixed(width: 75, height: 75) {\n              ...GatsbyImageSharpFixed_withWebp\n            }\n          }\n        }\n      }\n    `)\n\n  const {url, altText, title, user} = props;\n  const image = data[user].childImageSharp.fixed;\n  ...\n```\n\nThat way we can pass `monster1` or `monster2` in our `user` prop to have it render that monster.\n\n{/* &lt;Grid columns=&#x27;75px 3fr&#x27; rows=&#x27;1fr 1fr&#x27; gap={2} sx={{alignItems: &#x27;center&#x27;, mb: 3}}&gt; */}\n\n{/* &lt;AvatarPart user={&quot;monster1&quot;} /&gt; */}\n\n```jsx\n&lt;Avatar alText=&quot;Monster P. Whittington portrait&quot; title=&quot;Monster P. Whittington&quot; user=&quot;monster1&quot; /&gt;\n```\n\n{/* &lt;AvatarPart user={&quot;monster2&quot;} /&gt; */}\n\n```jsx\n&lt;Avatar alText=&quot;Mons T. Cobblepot portrait&quot; title=&quot;Mons T. Cobblepot&quot; user=&quot;monster2&quot; /&gt;\n```\n\n{/* &lt;/Grid&gt; */}\n\nNice, now we can type it so it&#x27;s easier to know what name can be used and to see if our structure is correct if we ever need to edit it.\n",
            "url": "https://joelmturner.com/blog/avatar-component-gatsby-2",
            "title": "Create an Avatar Component in Gatsby with TypeScript Part 2: Gatsby Image",
            "date_modified": "2019-09-07T00:00:00.000Z",
            "author": {
                "name": "Joel M Turner",
                "url": "https://twitter.com/joelmturner"
            }
        },
        {
            "id": "https://joelmturner.com/blog/avatar-component-gatsby-1",
            "content_html": "<p><em>(The post <a href=\"https://joelmturner.com/blog/avatar-component-gatsby-1\">Create an Avatar Component in Gatsby with TypeScript Part 1</a> appeared first on <a href=\"https://joelmturner.com\">Joel M Turner Blog</a>.)</em></p>\nIn this series we&#x27;re going to take a look at creating a simple avatar component that is typed with TypeScript and has some special goodies in Gatsby land.\n\n&gt; I usually write TypeScript from the start, but I wanted to show each piece individually in case others aren&#x27;t familiar with TypeScript yet.\n\nLet&#x27;s start by identifying what our needs are for our avatar component.\n\n- [ ] Should show an image\n- [ ] Should be round\n- [ ] Should accept an image url\n- [ ] Should display an image based on a name (for small sets)\n\nCool, now we can start building our avatar. Start with an img element using a placeholder image as src. Add a little bit of styling to make it round and give it a size.\n\n```jsx\nfunction Avatar(props) {\n  const { url, altText, title } = props;\n\n  const styles = {\n    width: &#x27;75px&#x27;,\n    height: &#x27;75px&#x27;,\n    borderRadius: &#x27;50%&#x27;,\n  };\n\n  return &lt;img style={styles} src={url} alt={altText} title={title} /&gt;;\n}\n\nexport default Avatar;\n```\n\nThen we can pass it the image url and alt text. We can see that the component is working in its basic implementation now.\n\n```jsx\n&lt;Avatar\n  url=&quot;https://res.cloudinary.com/joelmturner/monster-01.png&quot;\n  alText=&quot;Monster P. Whittington portrait&quot;\n  title=&quot;Monster P. Whittington&quot;\n/&gt;\n```\n\n- [x] Should show an image\n- [x] Should be round\n- [x] Should accept an image url\n- [ ] Should display an image based on a name (for small sets)\n\nLooks good. We&#x27;ve met our first three criteria for this component. In step 2 we&#x27;ll make it more powerful with Gatsby Image.\n",
            "url": "https://joelmturner.com/blog/avatar-component-gatsby-1",
            "title": "Create an Avatar Component in Gatsby with TypeScript Part 1",
            "date_modified": "2019-09-06T00:00:00.000Z",
            "author": {
                "name": "Joel M Turner",
                "url": "https://twitter.com/joelmturner"
            }
        },
        {
            "id": "https://joelmturner.com/blog/animated-css-timer-icon",
            "content_html": "<p><em>(The post <a href=\"https://joelmturner.com/blog/animated-css-timer-icon\">Animated CSS Timer Icon</a> appeared first on <a href=\"https://joelmturner.com\">Joel M Turner Blog</a>.)</em></p>\nimport { CodePen } from &#x27;mdx-embed&#x27;;\n\nI recently had a need for a timer/revert icon that can animate forward and backward.\n\n## Pure CSS\n\nI wanted it to be a purely CSS and HTML versus an animated SVG or GIF so it can be manipulated more easily in the browser.\n\n## Adjustable Size\n\nThe size of the icon is relative to the wrapper so setting a different font-size will scale the icon proportionally.\n\n## Animation in Multiple Directions\n\nThe icon needs to animate forward and backward as well as have a rest state. The animation uses CSS keyframes based on the classes, &#x27;forward&#x27; and &#x27;backward&#x27;.\n\n### CSS Timer Icon\n\n&lt;CodePen codePenId=&quot;RLzVdO&quot; /&gt;\n\n### CSS Timer Icon as React Component\n\n&lt;CodePen codePenId=&quot;XzMoxY&quot; /&gt;\n",
            "url": "https://joelmturner.com/blog/animated-css-timer-icon",
            "title": "Animated CSS Timer Icon",
            "date_modified": "2017-11-11T00:00:00.000Z",
            "author": {
                "name": "Joel M Turner",
                "url": "https://twitter.com/joelmturner"
            }
        },
        {
            "id": "https://joelmturner.com/blog/handlettering-best-of-2016",
            "content_html": "<p><em>(The post <a href=\"https://joelmturner.com/blog/handlettering-best-of-2016\">My Best Hand Lettering and Sketches of 2016</a> appeared first on <a href=\"https://joelmturner.com\">Joel M Turner Blog</a>.)</em></p>\nAfter my year of lettering I continued going with my hand lettering and sketches on a daily basis. Much of my practice was inspired by other hand lettering and sketch artists that I found through Instagram. Looking back on 2016 I can see that I enjoy geometric shapes and ancient ideas/concepts. Here is a collection of my best from 2016.\n\n## Interactive\n\nThis is how to get stuck in an analog social loop. http://i.imgur.com/X6QrcoN.gifv\n\n&lt;Flex gap={4}&gt;\n\n[![](https://res.cloudinary.com/joelmturner/w_500,h_500,c_fill,q_auto/blog/2017/01/viral-card-1-optimized.jpg)](https://res.cloudinary.com/joelmturner/w_500,h_500,c_fill,q_auto/blog/2017/01/viral-card-1-optimized.jpg)\n\n[![](https://res.cloudinary.com/joelmturner/w_500,h_500,c_fill,q_auto/blog/2017/01/viral-card-2-optimized.jpg)](https://res.cloudinary.com/joelmturner/w_500,h_500,c_fill,q_auto/blog/2017/01/viral-card-2-optimized.jpg)\n\n&lt;/Flex&gt;\n\n## Static\n",
            "url": "https://joelmturner.com/blog/handlettering-best-of-2016",
            "title": "My Best Hand Lettering and Sketches of 2016",
            "date_modified": "2017-01-16T00:00:00.000Z",
            "author": {
                "name": "Joel M Turner",
                "url": "https://twitter.com/joelmturner"
            }
        },
        {
            "id": "https://joelmturner.com/blog/playing-with-type",
            "content_html": "<p><em>(The post <a href=\"https://joelmturner.com/blog/playing-with-type\">Playing with Type</a> appeared first on <a href=\"https://joelmturner.com\">Joel M Turner Blog</a>.)</em></p>\nFor the past month and a half, I have played with hand lettering to help me practice more hands-on design. I have chosen to spend about half an hour each day on each (longer on weekends) and not to edit them digitally.\n\nEach day, I post a new lettering sketch on &lt;a href=&quot;https://instagram.com/joelmturner/&quot;&gt;Instagram&lt;/a&gt; and log the medium used on &lt;a href=&quot;https://plus.google.com/collection/oWKCX&quot;&gt;Google+&lt;/a&gt;.\n\nHere are&amp;nbsp;the creations so far:\n",
            "url": "https://joelmturner.com/blog/playing-with-type",
            "title": "Playing with Type",
            "date_modified": "2015-06-26T00:00:00.000Z",
            "author": {
                "name": "Joel M Turner",
                "url": "https://twitter.com/joelmturner"
            }
        },
        {
            "id": "https://joelmturner.com/blog/pmj-artwork",
            "content_html": "<p><em>(The post <a href=\"https://joelmturner.com/blog/pmj-artwork\">Post Modern Jukebox Art</a> appeared first on <a href=\"https://joelmturner.com\">Joel M Turner Blog</a>.)</em></p>\nAfter seeing Scott Bradlee and Post Modern Jukebox live in Portland on their Eviction Tour, I was inspired to create some promo images.\n\n## Post Modern Jukebox Artwork\n\nThis first graphic is based on the design of the Post Modern Jukebox website. [![Post Modern Jukebox Promotional Poster](https://res.cloudinary.com/joelmturner/q_auto/blog/2014/12/PMJ-Promotional-Poster.jpg)](https://res.cloudinary.com/joelmturner/q_auto/blog/2014/12/PMJ-Promotional-Poster.jpg)\n\n## Scott Bradlee Art\n\nThis one is for the Scott Bradlee who put the group together, writes the arrangements, and plays the piano. The poster is based on the jazz style event posters. [![Scott Bradlee Event Poster](https://res.cloudinary.com/joelmturner/q_auto/blog/2014/12/Scott-Bradlee-Event-Poster.jpg)](https://res.cloudinary.com/joelmturner/q_auto/blog/2014/12/Scott-Bradlee-Event-Poster.jpg)\n\n## Robyn Adele Anderson Art\n\nThe next one is a promotion of one of the main singers, Robyn Adele-Anderson. [![Robyn Adele Anderson Eviction Tour Promo Poster](https://res.cloudinary.com/joelmturner/q_auto/blog/2014/12/Robyn-Eviction-Tour-Promo-Poster.jpg)](https://res.cloudinary.com/joelmturner/q_auto/blog/2014/12/Robyn-Eviction-Tour-Promo-Poster.jpg)\n",
            "url": "https://joelmturner.com/blog/pmj-artwork",
            "title": "Post Modern Jukebox Art",
            "date_modified": "2014-12-12T00:00:00.000Z",
            "author": {
                "name": "Joel M Turner",
                "url": "https://twitter.com/joelmturner"
            }
        },
        {
            "id": "https://joelmturner.com/blog/sassy-with-sass",
            "content_html": "<p><em>(The post <a href=\"https://joelmturner.com/blog/sassy-with-sass\">Getting Sassy With Sass: Nesting</a> appeared first on <a href=\"https://joelmturner.com\">Joel M Turner Blog</a>.)</em></p>\nAs I&#x27;m learning to use Sass I decided to jot down some of the basics for reference. Most of this is coming from [Hampton Catlin](http://www.hamptoncatlin.com/)&#x27;s [Sass Basics](http://teamtreehouse.com/library/sass-basics) course on [Treehouse](http://referrals.trhou.se/joelmturner) (referral).\n\n## Nesting Selectors\n\nThe selectors can be nested for ease of writing and reading. This can help organize code in a way that like selectors are together. It also keeps us from having to repeat strings of selectors. A quick example would be:\n\n### Sass:\n\n```scss\n.selector1 {\n  .selector2 {\n    color: red;\n  }\n}\n```\n\n### CSS Output:\n\n```css\n.selector1 .selector2 {\n  color: red;\n}\n```\n\nYou can even go deeper if you would like. Let&#x27;s take a look at 4 levels deep (the suggested maximum depth for Sass).\n\n### Sass:\n\n```scss\n.selector1 {\n  .selector2 {\n    color: red;\n    .box {\n      background: blue;\n      h1 {\n        color: green;\n      }\n    }\n  }\n}\n```\n\n### CSS Output:\n\n```css\n.selector1 .selector2 {\n  color: red;\n}\n.selector1 .selector2 .box {\n  background: blue;\n}\n.selector1 .selector2 .box h1 {\n  color: green;\n}\n```\n\n## Using the &amp; Symbol\n\nThere is a helper character that makes referencing parent selectors much easier. This character is the **ampersand (&amp;)** symbol.\n\n### Sass:\n\n```scss\n.blog {\n  &gt; h1 {\n    color: red;\n    border: 1px solid red;\n  }\n  .entry {\n    h1 {\n      font-size: 20px;\n      color: blue;\n    }\n    p {\n      font-size: 12px;\n      margin: 20px;\n      html.csscolumns &amp; {\n        column-count: 2;\n        column-gap: 10px;\n        margin: 10px;\n      }\n    }\n    a {\n      color: red;\n      &amp;:hover {\n        color: blue;\n      }\n    }\n  }\n}\n```\n\n### CSS Output:\n\n```css\n.blog &gt; h1 {\n  color: red;\n  border: 1px solid red;\n}\n.blog .entry h1 {\n  font-size: 20px;\n  color: blue;\n}\n.blog .entry p {\n  font-size: 12px;\n  margin: 20px;\n}\nhtml.csscolumns .blog .entry p {\n  column-count: 2;\n  column-gap: 10px;\n  margin: 10px;\n}\n.blog .entry a {\n  color: red;\n}\n.blog .entry a:hover {\n  color: blue;\n}\n```\n",
            "url": "https://joelmturner.com/blog/sassy-with-sass",
            "title": "Getting Sassy With Sass: Nesting",
            "date_modified": "2014-10-03T00:00:00.000Z",
            "author": {
                "name": "Joel M Turner",
                "url": "https://twitter.com/joelmturner"
            }
        },
        {
            "id": "https://joelmturner.com/blog/decisions-we-make",
            "content_html": "<p><em>(The post <a href=\"https://joelmturner.com/blog/decisions-we-make\">Choosing the Decisions We Make</a> appeared first on <a href=\"https://joelmturner.com\">Joel M Turner Blog</a>.)</em></p>\nYou know that feeling of being run down by the overwhelming weight of the decisions that you have to make on a regular basis? I definitely have, and I&#x27;ve been practicing a solution that is working for me.\n\n## Decisions Use Energy\n\nAll decisions take up energy as we try process them. I&#x27;m starting to see this as neither good nor bad. What is important is where we prefer to extend our energy. This doesn&#x27;t mean that I want to automate everything and then sleep on the beach all day. There is a therapeutic beauty in daily practice of things we enjoy, like a [Japanese Tea Ceremony](http://www.youtube.com/watch?v=lL9BiNuImws). I&#x27;ll share an example from my experience. Making a decision of which trail or path to run on is a decision that I enjoy making. Trying to figure out which bills I need to pay at what time is not a decision process I enjoy. From [The Simple Dollar](http://www.thesimpledollar.com/automating-small-decisions/)\n\nIf we can find ways to take some of those decisions out of our hands, we reduce the number of active decisions we have to make in a given day. Thus, our decision fatigue is reduced and we’re less likely to make poor decisions due to such fatigue. Our solution is to automate little decisions. We do this by spending time up front thinking of ways to eliminate some of our little regular decisions. Even eliminating tiny decisions really helps.\n\n## Automating Tasks That Aren&#x27;t Important\n\nThere are so many tools available that can help us with those decisions that we don&#x27;t enjoy as much. It might take a little work up front but the ease of mind later on is totally worth it. Using the bill paying example above, I have set up my bills to be paid automatically based on the days that I get paid. This helps free my mind from trying to hold it all in my mental calendar. It is so simple and it is very easy to forget that it is simple.\n\n## Choosing the Decisions We Make\n\nAutomating some of these tasks allows me to enjoy the tasks/decisions that I enjoy to have as part of my [daily routine](/blog/daily-routine-freedom/ &#x27;Creating a Daily Routine for Freedom&#x27;). By doing this, I feel more fulfilled and have more energy to give to my favorite tasks. I can reassess these automated tasks and the tasks that I enjoy every few months to see if they are still working to my benefit. This is much less upkeep than having to deal with them all daily. What decisions do you enjoy making? Which would you prefer not to make as often? Are you able to automate some of those tasks?\n",
            "url": "https://joelmturner.com/blog/decisions-we-make",
            "title": "Choosing the Decisions We Make",
            "date_modified": "2014-01-21T00:00:00.000Z",
            "author": {
                "name": "Joel M Turner",
                "url": "https://twitter.com/joelmturner"
            }
        },
        {
            "id": "https://joelmturner.com/blog/daily-routine-freedom",
            "content_html": "<p><em>(The post <a href=\"https://joelmturner.com/blog/daily-routine-freedom\">Creating a Daily Routine for Freedom</a> appeared first on <a href=\"https://joelmturner.com\">Joel M Turner Blog</a>.)</em></p>\nThe more I explore myself, the more I realize that my &quot;freedom&quot; is not from not having anything to do but by doing things that give me purpose.\n\n## Watching the Clock with Nothing to Do\n\nI spent many years without a daily routine. Not having a routine made me watch the clock, not getting anything done and I found it hard to feel fulfilled at the end of the day. Not having a routine made me check the time often and gave me a feeling like I was wasting time in some way. I wasn&#x27;t sure how to get things done or which item I should start next. There were no priorities and therefore, no way to know what was important.\n\n## Creating a Daily Routine\n\nIt seemed counter intuitive to me but setting a full daily routine has helped me feel more free. I think part of the freedom feeling is feeling fulfilled. Doing what is important to me helps me feel like I have taken care of my list, even if some office work doesn&#x27;t get finished. Creating a daily routine for me is about simplicity. If I do the things that are most important for my welfare, I feel fulfilled. For me, if I do my daily meditation and mantra practice, I feel good, even if more work came in than I was able to finish. I have noticed that doing something daily, even if it is only for a few minutes a day, makes me much better at it. Aly Dunne ([@thewayofmantra](https://twitter.com/thewayofmantra)) explains how a [daily practice is like a river](http://thewayofmantra.com/daily-practice-the-unstoppable-power/) wearing down rock over time. Here is a quick view of my daily routine:\n\n- Wake up, meditate, chant\n- Drink elixir (modified from [Apple Cider Vinegar Elixir](http://kaleuniversity.org/recipes/apple-cider-vinegar-elixir/)), walk dogs, start hot water for tea, sing to [my kombucha scoby](https://plus.google.com/+JoelTurnerGo/posts/UNyep6bPPCy)\n- Work on graphic/web projects\n- Eat lunch\n- Work on graphic/web projects\n- Go for run, walk dogs, walk by myself\n- Meet with friends, network\n- Wind down, sleep\n\n## Resources for Optimizing the Daily Routine\n\nHere are some of the tools and resources that help me develop and stick with my routine.\n\n- [Aly Dunne](http://thewayofmantra.com), my Sanskrit Mantra teacher\n- [Insightly](https://insighttimer.com/), meditation timer\n- [Amazing routines of 7 successful entrepreneurs](http://blog.bufferapp.com/the-daily-routines-of-famous-entrepreneurs-and-how-to-design-your-own-master-routine), Buffer blog\n- [Benjamin Franklin](http://www.parade.com/35748/parade/what-was-benjamin-franklins-daily-routine/), Parade\n- [Leo Babauta](http://leobabauta.com/), founder of [Zen Habits](http://zenhabits.net/)\n- [StayFocused](https://chrome.google.com/webstore/detail/stayfocusd/laankejkbhbdhmipfmgcngdelahlfoji), Chrome tab blocking app\n- [Buffer](http://bufferapp.com), social media sharing tool\n\n## Your Routine\n\nDo you have a daily routine? If so, what have you noticed by following it/not following it?\n",
            "url": "https://joelmturner.com/blog/daily-routine-freedom",
            "title": "Creating a Daily Routine for Freedom",
            "date_modified": "2014-01-17T00:00:00.000Z",
            "author": {
                "name": "Joel M Turner",
                "url": "https://twitter.com/joelmturner"
            }
        },
        {
            "id": "https://joelmturner.com/blog/doctors-companions",
            "content_html": "<p><em>(The post <a href=\"https://joelmturner.com/blog/doctors-companions\">The Doctor's Companions</a> appeared first on <a href=\"https://joelmturner.com\">Joel M Turner Blog</a>.)</em></p>\nIn honor of the 50th Anniversary of Doctor Who, my wife and I decided to do a little tribute to the Doctor&#x27;s companions in the series. This post covers some of the companions from the new series. Curating assistance on this post by Suzanne Turner ([DelysiaStyle](http://delysiastyle.com)).\n\n## Rose Tyler (Billie Piper)\n\n![Rose Tyler Billie Piper White Dress](https://res.cloudinary.com/joelmturner/q_auto/blog/2013/11/Rose-Tyler-Billie-Piper-White-Dress.jpg)\n\n[Image Credit](http://userserve-ak.last.fm/serve/_/50207127/Billie+Piper+hq+png.png)\n\n## Jack Harkness (John Barrowman)\n\n![John Barrowman smile](https://res.cloudinary.com/joelmturner/q_auto/blog/2013/11/John-Barrowman-smile.jpg)\n\n[Image Credit](http://lusciousandlovely19.files.wordpress.com/2013/08/john-barrowman-1.jpg?)\n\n## Mickey Smith (Noel Clarke)\n\n![Noel Clarke portrait](https://res.cloudinary.com/joelmturner/q_auto/blog/2013/11/Noel-Clarke-portrait.jpg)\n\n[Image Credit](http://www.bbc.co.uk/blogs/bbcthree/2011/07/noelclarkeqa1.shtml)\n\n## Donna Noble (Catherine Tate)\n\n![Catherine Tate blue shirt](https://res.cloudinary.com/joelmturner/q_auto/blog/2013/11/Catherine-Tate-blue-shirt.jpg)\n\n[Image Credit](http://venus.provocateuse.com/show/catherine_tate)\n\n## Martha Jones (Freema Agyeman)\n\n![Freema Agyeman blue shirt](https://res.cloudinary.com/joelmturner/q_auto/blog/2013/11/Freema-Agyeman-blue-shirt.jpg)\n\n[Image Credit](https://telestrekoza.com/link-gallery/albums/British_shows/Law_Order_UK/Cast/Season_1/Law_Order_UK_S1_Freema_Agyeman_002.jpg)\n\n## Wilfred Mott (Bernard Cribbins)\n\n![Bernard Cribbins](https://res.cloudinary.com/joelmturner/q_auto/blog/2013/11/Bernard-Cribbins.jpg)\n\n[Image Credit](http://www.david-tennant-news.com/blog/bernard-cribbins-is-on-graham-norton-s-bbc-radio-2-programme-today-at-10-am/)\n\n## Amy Pond (Karen Gillan)\n\n![Karen Gillan blue](https://res.cloudinary.com/joelmturner/q_auto/blog/2013/11/Karen-Gillan-blue.jpg)\n\n[Image Credit](http://www.wallcg.com/women-redheads-manhattan-karen-gillan-doctor-who-well-83695/)\n\n## Rory Williams (Arthur Darvill)\n\n![Arthur Darvill](https://res.cloudinary.com/joelmturner/q_auto/blog/2013/11/Arthur-Darvill.jpg)\n\n[Image Credit](http://www.standard.co.uk/goingout/theatre/dr-who-star-arthur-darvill-has-laptop-stolen-by-burglars-8225957.html)\n\n## River Song (Alex Kingston)\n\n![Alex Kingston black dress](https://res.cloudinary.com/joelmturner/q_auto/blog/2013/11/Alex-Kingston-black-dress.jpg)\n\n[Image Credit](http://www.picstopin.com/500/alex-kingston-/http:%7C%7C24*media*tumblr*com%7Ctumblr_md4sqnRVpB1qif9qto1_500*png/)\n\n## Craig Owens (James Corden)\n\n![James Corden blue](https://res.cloudinary.com/joelmturner/q_auto/blog/2013/11/James-Corden-blue.jpg)\n\n[Image Credit](http://hamishbrown.com/james-corden/)\n\n## Clara Oswald (Jenna-Louise Coleman)\n\n![Jenna-Louise Coleman yellow lace](https://res.cloudinary.com/joelmturner/q_auto/blog/2013/11/Jenna-Louise-Coleman.jpg)\n\n[Image Credit](http://www.mirror.co.uk/tv/tv-news/jenna-louise-coleman-doctor-who-sidekick-1781315)\n",
            "url": "https://joelmturner.com/blog/doctors-companions",
            "title": "The Doctor's Companions",
            "date_modified": "2013-11-25T00:00:00.000Z",
            "author": {
                "name": "Joel M Turner",
                "url": "https://twitter.com/joelmturner"
            }
        }
    ]
}