---
import { type IllustrationItem } from '@lib/types';
import { css } from 'styled-system/css';
import { grid } from 'styled-system/patterns';
import { CldImage } from 'astro-cloudinary';
import { ILLUSTRATION_FILTER_OPTIONS } from '@lib/constants';
import { flex } from 'styled-system/patterns/flex';

// Add this function to get the Cloudinary public ID from the full URL
function getPublicId(url: string) {
  const parts = url.split('/');
  return parts.slice(-2).join('/').split('.')[0];
}

interface Props {
  illustrations: IllustrationItem[];
}

const { illustrations } = Astro.props;
---

<div class={flex({ gap: 4, flexDirection: 'column' })}>
  <wa-dropdown id="collection-select">
    <wa-button slot="trigger" caret>Collections</wa-button>
    <wa-menu>
      {
        ILLUSTRATION_FILTER_OPTIONS.map(({ value, label }) => (
          <wa-menu-item value={value}>{label}</wa-menu-item>
        ))
      }
    </wa-menu>
  </wa-dropdown>

  <div id="gallery" class={grid({ columns: [1, 1, 2, 3], gap: 4 })}>
    {
      illustrations.map((image, index) => (
        <CldImage
          src={image.url}
          alt={image.id}
          width={400}
          height={400}
          loading="lazy"
          class={css({
            w: 'full',
            h: 'auto',
            objectFit: 'cover',
            borderRadius: 'md',
            cursor: 'pointer',
          })}
          data-tags={image.tags.join(',')}
          data-index={index}
          data-public-id={getPublicId(image.url)}
        />
      ))
    }
  </div>
</div>

<wa-dialog
  label="Dialog"
  light-dismiss
  class="dialog-light-dismiss"
  class={css({
    '--width': '70vw',
  })}
>
  <wa-carousel navigation style={{ '--aspect-ratio': '1/1' }}> </wa-carousel>
</wa-dialog>

<script>
  import { ILLUSTRATION_FILTER_OPTIONS } from '@lib/constants';
  import { getCldImageUrl } from 'astro-cloudinary/helpers';

  // Get the initial collection from the URL
  const urlParams = new URLSearchParams(window.location.search);
  const initialCollection = urlParams.get('collection') || 'joelmturner_featured';

  const select = document.querySelector('wa-dropdown');
  const dropdownButton = document.querySelector('wa-button');
  const gallery = document.getElementById('gallery');
  const carousel = document.querySelector('wa-carousel') as WaCarousel;
  const lightbox = document.querySelector('wa-dialog') as HTMLDialogElement;

  function filterImages(selectedValue: string) {
    const images = gallery?.getElementsByTagName('img');
    const resolvedSelectedValue =
      selectedValue === 'featured' ? 'joelmturner_featured' : selectedValue;
    for (const img of images ?? []) {
      if (img.dataset.tags?.includes(resolvedSelectedValue)) {
        img.style.display = 'block';
      } else {
        img.style.display = 'none';
      }
    }

    function getFullSizeUrl(publicId: string) {
      return decodeURIComponent(
        getCldImageUrl({
          src: publicId,
          width: 800,
          height: 800,
          format: 'auto',
          quality: 'auto',
        })
      );
    }

    // update the wa-carousel list based on the selected collection value
    carousel.innerHTML = '';
    Array.from(images ?? [])
      ?.filter((imageNode) => imageNode.dataset.tags?.includes(resolvedSelectedValue))
      ?.forEach((image) => {
        const slide = document.createElement('wa-carousel-item');
        slide.dataset.index = image.dataset.index;
        slide.dataset.publicId = image.dataset.publicId;
        slide.dataset.tags = image.dataset.tags;
        slide.innerHTML = `
        <img
          src="${getFullSizeUrl(image.dataset.publicId ?? '')}"
          alt="${image.id}"
          width="900"
          height="1200"
          sizes="70vw"
          data-index="${image.dataset.index}"
          data-public-id="${image.dataset.publicId}"
          data-tags="${image.dataset.tags}"
        />
    `;
        carousel.appendChild(slide);
      });
  }

  function updateSelectAndFilter(selectedValue: string, selectedLabel: string) {
    if (dropdownButton) {
      dropdownButton.textContent = selectedLabel;
    }
    filterImages(selectedValue);
  }

  interface WaSelectEvent extends Event {
    detail: {
      item: {
        value: string;
        textContent: string;
      };
    };
  }
  interface WaCarousel extends HTMLElement {
    goToSlide: (index: number) => void;
  }

  select?.addEventListener('wa-select', function (event) {
    const customEvent = event as WaSelectEvent;
    const selectedValue = customEvent.detail.item.value;
    const selectedLabel = customEvent.detail.item.textContent;

    updateSelectAndFilter(selectedValue, selectedLabel);
    // Update URL with the new collection
    const url = new URL(window.location.href);
    url.searchParams.set('collection', selectedValue);
    window.history.pushState({}, '', url);
  });

  // initial update and filter based on the query parameter
  document.addEventListener('DOMContentLoaded', () => {
    const initialLabel =
      ILLUSTRATION_FILTER_OPTIONS.find((option) => option.value === initialCollection)?.label ??
      initialCollection;
    updateSelectAndFilter(initialCollection, initialLabel);
  });

  let carouselTimeout: NodeJS.Timeout;

  gallery?.addEventListener('click', (event) => {
    const target = event.target as HTMLImageElement;
    if (target.tagName === 'IMG' && window.innerWidth >= 768) {
      lightbox.open = true;

      const carouselIndex = Array.from(carousel?.querySelectorAll(`wa-carousel-item`)).findIndex(
        (item) => (item as HTMLElement).dataset.publicId === target.dataset.publicId
      );

      (lightbox as HTMLDialogElement & { updateComplete: Promise<void> }).updateComplete.then(
        () => {
          if (carousel) {
            if (carouselTimeout) {
              clearTimeout(carouselTimeout);
            }

            carouselTimeout = setTimeout(() => {
              console.log('called');
              carousel.goToSlide(carouselIndex);
            }, 100);
          }
        }
      );
    }
  });

  lightbox.addEventListener('click', (event) => {
    if (event.target === lightbox) {
      lightbox.open = false;
    }
  });
</script>
